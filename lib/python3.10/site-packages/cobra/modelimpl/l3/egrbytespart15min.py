# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class EgrBytesPart15min(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = StatsClassMeta("cobra.model.l3.EgrBytesPart15min", "mpls vrf egress bytes")

    counter = CounterMeta("drop", CounterCategory.COUNTER, "bytes", "mpls vrf egress drop bytes")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "dropLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "dropCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "dropPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "dropMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "dropMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "dropAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "dropSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "dropBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "dropThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "dropTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "dropTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "dropRate"
    meta._counters.append(counter)

    counter = CounterMeta("admit", CounterCategory.COUNTER, "bytes", "mpls vrf egress admit bytes")
    counter._propRefs[PropCategory.IMPLICIT_LASTREADING] = "admitLast"
    counter._propRefs[PropCategory.IMPLICIT_CUMULATIVE] = "admitCum"
    counter._propRefs[PropCategory.IMPLICIT_PERIODIC] = "admitPer"
    counter._propRefs[PropCategory.IMPLICIT_MIN] = "admitMin"
    counter._propRefs[PropCategory.IMPLICIT_MAX] = "admitMax"
    counter._propRefs[PropCategory.IMPLICIT_AVG] = "admitAvg"
    counter._propRefs[PropCategory.IMPLICIT_SUSPECT] = "admitSpct"
    counter._propRefs[PropCategory.IMPLICIT_BASELINE] = "admitBase"
    counter._propRefs[PropCategory.IMPLICIT_THRESHOLDED] = "admitThr"
    counter._propRefs[PropCategory.IMPLICIT_TREND_BASE] = "admitTrBase"
    counter._propRefs[PropCategory.IMPLICIT_TREND] = "admitTr"
    counter._propRefs[PropCategory.IMPLICIT_RATE] = "admitRate"
    meta._counters.append(counter)

    meta.moClassName = "l3EgrBytesPart15min"
    meta.rnFormat = "CDl3EgrBytesPart15min-%(nodeId)s"
    meta.category = MoCategory.STATS_CURRENT
    meta.label = "current portion of the mpls vrf egress bytes stats in 15 minute"
    meta.writeAccessMask = 0x5
    meta.readAccessMask = 0x5
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.parentClasses.add("cobra.model.fv.CtxDef")

    meta.superClasses.add("cobra.model.stats.Item")
    meta.superClasses.add("cobra.model.stats.Curr")
    meta.superClasses.add("cobra.model.l3.EgrBytesPart")
    meta.superClasses.add("cobra.model.stats.CurrAgPart")

    meta.rnPrefixes = [
        ('CDl3EgrBytesPart15min-', True),
    ]

    prop = PropMeta("str", "admitAvg", "admitAvg", 58678, PropCategory.IMPLICIT_AVG)
    prop.label = "mpls vrf egress admit bytes average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitAvg", prop)

    prop = PropMeta("str", "admitBase", "admitBase", 58673, PropCategory.IMPLICIT_BASELINE)
    prop.label = "mpls vrf egress admit bytes baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitBase", prop)

    prop = PropMeta("str", "admitCum", "admitCum", 58674, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "mpls vrf egress admit bytes cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitCum", prop)

    prop = PropMeta("str", "admitLast", "admitLast", 58672, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "mpls vrf egress admit bytes current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitLast", prop)

    prop = PropMeta("str", "admitMax", "admitMax", 58677, PropCategory.IMPLICIT_MAX)
    prop.label = "mpls vrf egress admit bytes maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitMax", prop)

    prop = PropMeta("str", "admitMin", "admitMin", 58676, PropCategory.IMPLICIT_MIN)
    prop.label = "mpls vrf egress admit bytes minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitMin", prop)

    prop = PropMeta("str", "admitPer", "admitPer", 58675, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "mpls vrf egress admit bytes periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitPer", prop)

    prop = PropMeta("str", "admitRate", "admitRate", 58683, PropCategory.IMPLICIT_RATE)
    prop.label = "mpls vrf egress admit bytes rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitRate", prop)

    prop = PropMeta("str", "admitSpct", "admitSpct", 58679, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "mpls vrf egress admit bytes suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitSpct", prop)

    prop = PropMeta("str", "admitThr", "admitThr", 58680, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "mpls vrf egress admit bytes thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("admitThr", prop)

    prop = PropMeta("str", "admitTr", "admitTr", 58682, PropCategory.IMPLICIT_TREND)
    prop.label = "mpls vrf egress admit bytes trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitTr", prop)

    prop = PropMeta("str", "admitTrBase", "admitTrBase", 58681, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "mpls vrf egress admit bytes trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("admitTrBase", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cnt", "cnt", 16212, PropCategory.REGULAR)
    prop.label = "Number of Collections During this Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("cnt", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dropAvg", "dropAvg", 58712, PropCategory.IMPLICIT_AVG)
    prop.label = "mpls vrf egress drop bytes average value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropAvg", prop)

    prop = PropMeta("str", "dropBase", "dropBase", 58707, PropCategory.IMPLICIT_BASELINE)
    prop.label = "mpls vrf egress drop bytes baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropBase", prop)

    prop = PropMeta("str", "dropCum", "dropCum", 58708, PropCategory.IMPLICIT_CUMULATIVE)
    prop.label = "mpls vrf egress drop bytes cumulative"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropCum", prop)

    prop = PropMeta("str", "dropLast", "dropLast", 58706, PropCategory.IMPLICIT_LASTREADING)
    prop.label = "mpls vrf egress drop bytes current value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropLast", prop)

    prop = PropMeta("str", "dropMax", "dropMax", 58711, PropCategory.IMPLICIT_MAX)
    prop.label = "mpls vrf egress drop bytes maximum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropMax", prop)

    prop = PropMeta("str", "dropMin", "dropMin", 58710, PropCategory.IMPLICIT_MIN)
    prop.label = "mpls vrf egress drop bytes minimum value"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropMin", prop)

    prop = PropMeta("str", "dropPer", "dropPer", 58709, PropCategory.IMPLICIT_PERIODIC)
    prop.label = "mpls vrf egress drop bytes periodic"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropPer", prop)

    prop = PropMeta("str", "dropRate", "dropRate", 58717, PropCategory.IMPLICIT_RATE)
    prop.label = "mpls vrf egress drop bytes rate"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropRate", prop)

    prop = PropMeta("str", "dropSpct", "dropSpct", 58713, PropCategory.IMPLICIT_SUSPECT)
    prop.label = "mpls vrf egress drop bytes suspect count"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropSpct", prop)

    prop = PropMeta("str", "dropThr", "dropThr", 58714, PropCategory.IMPLICIT_THRESHOLDED)
    prop.label = "mpls vrf egress drop bytes thresholded flags"
    prop.isOper = True
    prop.isStats = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("avgCrit", "avg-severity-critical", 2199023255552)
    prop._addConstant("avgHigh", "avg-crossed-high-threshold", 68719476736)
    prop._addConstant("avgLow", "avg-crossed-low-threshold", 137438953472)
    prop._addConstant("avgMajor", "avg-severity-major", 1099511627776)
    prop._addConstant("avgMinor", "avg-severity-minor", 549755813888)
    prop._addConstant("avgRecovering", "avg-recovering", 34359738368)
    prop._addConstant("avgWarn", "avg-severity-warning", 274877906944)
    prop._addConstant("cumulativeCrit", "cumulative-severity-critical", 8192)
    prop._addConstant("cumulativeHigh", "cumulative-crossed-high-threshold", 256)
    prop._addConstant("cumulativeLow", "cumulative-crossed-low-threshold", 512)
    prop._addConstant("cumulativeMajor", "cumulative-severity-major", 4096)
    prop._addConstant("cumulativeMinor", "cumulative-severity-minor", 2048)
    prop._addConstant("cumulativeRecovering", "cumulative-recovering", 128)
    prop._addConstant("cumulativeWarn", "cumulative-severity-warning", 1024)
    prop._addConstant("lastReadingCrit", "lastreading-severity-critical", 64)
    prop._addConstant("lastReadingHigh", "lastreading-crossed-high-threshold", 2)
    prop._addConstant("lastReadingLow", "lastreading-crossed-low-threshold", 4)
    prop._addConstant("lastReadingMajor", "lastreading-severity-major", 32)
    prop._addConstant("lastReadingMinor", "lastreading-severity-minor", 16)
    prop._addConstant("lastReadingRecovering", "lastreading-recovering", 1)
    prop._addConstant("lastReadingWarn", "lastreading-severity-warning", 8)
    prop._addConstant("maxCrit", "max-severity-critical", 17179869184)
    prop._addConstant("maxHigh", "max-crossed-high-threshold", 536870912)
    prop._addConstant("maxLow", "max-crossed-low-threshold", 1073741824)
    prop._addConstant("maxMajor", "max-severity-major", 8589934592)
    prop._addConstant("maxMinor", "max-severity-minor", 4294967296)
    prop._addConstant("maxRecovering", "max-recovering", 268435456)
    prop._addConstant("maxWarn", "max-severity-warning", 2147483648)
    prop._addConstant("minCrit", "min-severity-critical", 134217728)
    prop._addConstant("minHigh", "min-crossed-high-threshold", 4194304)
    prop._addConstant("minLow", "min-crossed-low-threshold", 8388608)
    prop._addConstant("minMajor", "min-severity-major", 67108864)
    prop._addConstant("minMinor", "min-severity-minor", 33554432)
    prop._addConstant("minRecovering", "min-recovering", 2097152)
    prop._addConstant("minWarn", "min-severity-warning", 16777216)
    prop._addConstant("periodicCrit", "periodic-severity-critical", 1048576)
    prop._addConstant("periodicHigh", "periodic-crossed-high-threshold", 32768)
    prop._addConstant("periodicLow", "periodic-crossed-low-threshold", 65536)
    prop._addConstant("periodicMajor", "periodic-severity-major", 524288)
    prop._addConstant("periodicMinor", "periodic-severity-minor", 262144)
    prop._addConstant("periodicRecovering", "periodic-recovering", 16384)
    prop._addConstant("periodicWarn", "periodic-severity-warning", 131072)
    prop._addConstant("rateCrit", "rate-severity-critical", 36028797018963968)
    prop._addConstant("rateHigh", "rate-crossed-high-threshold", 1125899906842624)
    prop._addConstant("rateLow", "rate-crossed-low-threshold", 2251799813685248)
    prop._addConstant("rateMajor", "rate-severity-major", 18014398509481984)
    prop._addConstant("rateMinor", "rate-severity-minor", 9007199254740992)
    prop._addConstant("rateRecovering", "rate-recovering", 562949953421312)
    prop._addConstant("rateWarn", "rate-severity-warning", 4503599627370496)
    prop._addConstant("trendCrit", "trend-severity-critical", 281474976710656)
    prop._addConstant("trendHigh", "trend-crossed-high-threshold", 8796093022208)
    prop._addConstant("trendLow", "trend-crossed-low-threshold", 17592186044416)
    prop._addConstant("trendMajor", "trend-severity-major", 140737488355328)
    prop._addConstant("trendMinor", "trend-severity-minor", 70368744177664)
    prop._addConstant("trendRecovering", "trend-recovering", 4398046511104)
    prop._addConstant("trendWarn", "trend-severity-warning", 35184372088832)
    prop._addConstant("unspecified", None, 0)
    meta.props.add("dropThr", prop)

    prop = PropMeta("str", "dropTr", "dropTr", 58716, PropCategory.IMPLICIT_TREND)
    prop.label = "mpls vrf egress drop bytes trend"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropTr", prop)

    prop = PropMeta("str", "dropTrBase", "dropTrBase", 58715, PropCategory.IMPLICIT_TREND_BASE)
    prop.label = "mpls vrf egress drop bytes trend baseline"
    prop.isOper = True
    prop.isStats = True
    meta.props.add("dropTrBase", prop)

    prop = PropMeta("str", "lastCollOffset", "lastCollOffset", 111, PropCategory.REGULAR)
    prop.label = "Collection Length"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("lastCollOffset", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 58552, PropCategory.REGULAR)
    prop.label = "Node Id"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "repIntvEnd", "repIntvEnd", 110, PropCategory.REGULAR)
    prop.label = "Reporting End Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvEnd", prop)

    prop = PropMeta("str", "repIntvStart", "repIntvStart", 109, PropCategory.REGULAR)
    prop.label = "Reporting Start Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("repIntvStart", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "nodeId"))

    def __init__(self, parentMoOrDn, nodeId, markDirty=True, **creationProps):
        namingVals = [nodeId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
