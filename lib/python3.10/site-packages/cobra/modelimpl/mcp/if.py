# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class If(Mo):
    """
    The Mis-cabling Protocol (MCP) configured interface. The interface type can be physical Ethernet Interface or the Port-Channel Interface. The MCP packets are sent over the logic interfaces.

    """

    meta = ClassMeta("cobra.model.mcp.If")

    meta.moClassName = "mcpIf"
    meta.rnFormat = "if-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "MCP Interface"
    meta.writeAccessMask = 0x9049
    meta.readAccessMask = 0x9049
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.l2.RsEthIf")
    meta.childClasses.add("cobra.model.l2.RsMgmtIf")
    meta.childClasses.add("cobra.model.nw.RtPathToIf")

    meta.childNamesAndRnPrefix.append(("cobra.model.nw.RtPathToIf", "rtpathToIf-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsMgmtIf", "rsmgmtIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.l2.RsEthIf", "rsethIf"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.mcp.Inst")

    meta.superClasses.add("cobra.model.nw.LogicalIf")
    meta.superClasses.add("cobra.model.l2.ProtIf")
    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.nw.Ep")
    meta.superClasses.add("cobra.model.nw.ProtIf")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.If")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('if-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 3674, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5585, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "gracePeriod", "gracePeriod", 65410, PropCategory.REGULAR)
    prop.label = "Grace Period"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 300)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("gracePeriod", prop)

    prop = PropMeta("str", "gracePeriodMsec", "gracePeriodMsec", 65411, PropCategory.REGULAR)
    prop.label = "Grace Period"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 999)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("gracePeriodMsec", prop)

    prop = PropMeta("str", "id", "id", 6915, PropCategory.REGULAR)
    prop.label = "Interface ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("id", prop)

    prop = PropMeta("str", "lastLoopDetTs", "lastLoopDetTs", 16961, PropCategory.REGULAR)
    prop.label = "Last Loop Detect Timestamp"
    prop.isOper = True
    meta.props.add("lastLoopDetTs", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "loopDetVlan", "loopDetVlan", 27659, PropCategory.REGULAR)
    prop.label = "Loop Detected VLAN"
    prop.isOper = True
    meta.props.add("loopDetVlan", prop)

    prop = PropMeta("str", "loopStQual", "loopStQual", 20729, PropCategory.REGULAR)
    prop.label = "Loop State Qualifier"
    prop.isOper = True
    prop._addConstant("high-prio", "higher-priority-interface", 1)
    meta.props.add("loopStQual", prop)

    prop = PropMeta("str", "maxLimitReached", "maxLimitReached", 65464, PropCategory.REGULAR)
    prop.label = "Reached maximum supported vlan limit for the MCP interface"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", 0)
    prop._addConstant("yes", "yes", 1)
    meta.props.add("maxLimitReached", prop)

    prop = PropMeta("str", "maxPduPerVlanLimit", "maxPduPerVlanLimit", 67967, PropCategory.REGULAR)
    prop.label = "Maximum Number of VLANs"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 2000)]
    prop.defaultValue = 256
    prop.defaultValueStr = "256"
    meta.props.add("maxPduPerVlanLimit", prop)

    prop = PropMeta("str", "mcpMode", "mcpMode", 63904, PropCategory.REGULAR)
    prop.label = "Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "off"
    prop._addConstant("off", "non-strict", 1)
    prop._addConstant("on", "strict", 2)
    meta.props.add("mcpMode", prop)

    prop = PropMeta("str", "mcpPduPerVlan", "mcpPduPerVlan", 67966, PropCategory.REGULAR)
    prop.label = "MCP PDU per VLAN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "on"
    prop._addConstant("off", "disabled", 1)
    prop._addConstant("on", "enabled", 2)
    meta.props.add("mcpPduPerVlan", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14439, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 2437, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "init"
    prop._addConstant("down", "down", 2)
    prop._addConstant("init", "initializing", 0)
    prop._addConstant("up", "forwarding", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 16960, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "up"
    prop._addConstant("admin-down", "administratively-down", 3)
    prop._addConstant("if-down", "interface-down", 1)
    prop._addConstant("loop", "loop-detected", 2)
    prop._addConstant("unsupported", "unsupported", 4)
    prop._addConstant("up", "up", 0)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "strictInitDelayTime", "strictInitDelayTime", 65407, PropCategory.REGULAR)
    prop.label = "Init Delay Time"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 1800)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("strictInitDelayTime", prop)

    prop = PropMeta("str", "strictTxFreq", "strictTxFreq", 65408, PropCategory.REGULAR)
    prop.label = "Transmission Frequency"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 300)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("strictTxFreq", prop)

    prop = PropMeta("str", "strictTxFreqMsec", "strictTxFreqMsec", 65409, PropCategory.REGULAR)
    prop.label = "Transmission Frequency"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 999)]
    prop.defaultValue = 500
    prop.defaultValueStr = "500"
    meta.props.add("strictTxFreqMsec", prop)

    prop = PropMeta("str", "unsupportedConfig", "unsupportedConfig", 65942, PropCategory.REGULAR)
    prop.label = "Unsupported config for the MCP interface"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "supported"
    prop._addConstant("not-supported-on-fex-port", "mcp-strict-mode-not-supported-on-fex-port", 1)
    prop._addConstant("not-supported-on-qinq-edge-port", "mcp-strict-mode-not-supported-on-qinq-edge-port", 2)
    prop._addConstant("supported", "supported", 0)
    meta.props.add("unsupportedConfig", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    meta.deploymentCategory = DeploymentCategory("interface", "Interface")
    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
