# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Inst(Mo):
    """
     This object holds PTP instance information.  

    """

    meta = ClassMeta("cobra.model.ptp.Inst")

    meta.moClassName = "ptpInst"
    meta.rnFormat = "inst"
    meta.category = MoCategory.REGULAR
    meta.label = "PTP Instance"
    meta.writeAccessMask = 0x9049
    meta.readAccessMask = 0x9049
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.ptp.If")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.ptp.If", "if-"))

    meta.parentClasses.add("cobra.model.ptp.Entity")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.nw.CpInst")
    meta.superClasses.add("cobra.model.nw.ProtInst")
    meta.superClasses.add("cobra.model.l3.ProtInst")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('inst', False),
    ]

    prop = PropMeta("str", "UnsupportedOnBreakoutport", "UnsupportedOnBreakoutport", 69907, PropCategory.REGULAR)
    prop.label = "Flag to tell the ptp configuration not compatible with breakout port"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("UnsupportedOnBreakoutport", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 3679, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 3680, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("stateful-ha", "stateful-ha", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "defaultDomain", "defaultDomain", 56017, PropCategory.REGULAR)
    prop.label = "PTP global default Domain"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("defaultDomain", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "fabAnnounceIntvl", "fabAnnounceIntvl", 56019, PropCategory.REGULAR)
    prop.label = "Announce Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(-3, 4)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("fabAnnounceIntvl", prop)

    prop = PropMeta("str", "fabAnnounceTimeout", "fabAnnounceTimeout", 56022, PropCategory.REGULAR)
    prop.label = "Announce Timeout"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(2, 10)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("fabAnnounceTimeout", prop)

    prop = PropMeta("str", "fabDelayIntvl", "fabDelayIntvl", 56020, PropCategory.REGULAR)
    prop.label = "Delay Request Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(-4, 6)]
    prop.defaultValue = -2
    prop.defaultValueStr = "-2"
    meta.props.add("fabDelayIntvl", prop)

    prop = PropMeta("str", "fabProfileTemplate", "fabProfileTemplate", 56018, PropCategory.REGULAR)
    prop.label = "PTP profile Template"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "aes67"
    prop._addConstant("aes67", "aes67-2015", 2)
    prop._addConstant("default", "default", 1)
    prop._addConstant("smpte", "smpte-2059-2", 3)
    prop._addConstant("telecom_full_path", "telecom-8275-1", 4)
    meta.props.add("fabProfileTemplate", prop)

    prop = PropMeta("str", "fabSyncIntvl", "fabSyncIntvl", 56021, PropCategory.REGULAR)
    prop.label = "Sync Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(-4, 1)]
    prop.defaultValue = -3
    prop.defaultValueStr = "-3"
    meta.props.add("fabSyncIntvl", prop)

    prop = PropMeta("str", "isGmChange", "isGmChange", 63680, PropCategory.REGULAR)
    prop.label = "Flag to tell if Grandmaster clock has changed for the PTP protocol"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("isGmChange", prop)

    prop = PropMeta("str", "isGmChangeToLocal", "isGmChangeToLocal", 63681, PropCategory.REGULAR)
    prop.label = "Flag to tell if Grandmaster clock has changed to local clock for the PTP protocol"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("isGmChangeToLocal", prop)

    prop = PropMeta("str", "isHighCorrection", "isHighCorrection", 63682, PropCategory.REGULAR)
    prop.label = "Flag to tell if PTP clock high correction"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("isHighCorrection", prop)

    prop = PropMeta("str", "isTimeSyncLost", "isTimeSyncLost", 63683, PropCategory.REGULAR)
    prop.label = "Flag to tell if PTP lost synchronization with master clock"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("isTimeSyncLost", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 63688, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 3678, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "nodeConfigIsNotTelecom", "nodeConfigIsNotTelecom", 63679, PropCategory.REGULAR)
    prop.label = "Flag to tell if Interface level PTP Telecom Profile is configured, but node-level configuration is not Telecom Profile."
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("nodeConfigIsNotTelecom", prop)

    prop = PropMeta("str", "nodeDomain", "nodeDomain", 63485, PropCategory.REGULAR)
    prop.label = "PTP Node-level Domain"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.defaultValue = 24
    prop.defaultValueStr = "24"
    meta.props.add("nodeDomain", prop)

    prop = PropMeta("str", "nodePrio1", "nodePrio1", 63486, PropCategory.REGULAR)
    prop.label = "PTP node-level priority1"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 128
    prop.defaultValueStr = "128"
    meta.props.add("nodePrio1", prop)

    prop = PropMeta("str", "nodePrio2", "nodePrio2", 63487, PropCategory.REGULAR)
    prop.label = "PTP node-level priority2"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 128
    prop.defaultValueStr = "128"
    meta.props.add("nodePrio2", prop)

    prop = PropMeta("str", "nodeProfile", "nodeProfile", 63483, PropCategory.REGULAR)
    prop.label = "Node-level PTP profile"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("none", "none", 0)
    prop._addConstant("telecom_full_path", "telecom-8275-1", 4)
    meta.props.add("nodeProfile", prop)

    prop = PropMeta("str", "nodeProfileIsTelecom", "nodeProfileIsTelecom", 63686, PropCategory.REGULAR)
    prop.label = "Flag to tell the configuration applied is not consistent with telecom profile"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("nodeProfileIsTelecom", prop)

    prop = PropMeta("str", "operErr", "operErr", 3681, PropCategory.REGULAR)
    prop.label = "Operational Errors Qualifier"
    prop.isOper = True
    prop._addConstant("feature-unsupported", "feature-unsupported", 64)
    prop._addConstant("init-err", "initialization-error", 1)
    prop._addConstant("int-err", "internal-error", 8)
    prop._addConstant("ipc-err", "ipc-error", 4)
    prop._addConstant("mem-err", "memory-error", 2)
    prop._addConstant("proto-err", "protocol-error", 32)
    prop._addConstant("sock-err", "socket-error", 16)
    meta.props.add("operErr", prop)

    prop = PropMeta("str", "operatingMode", "operatingMode", 63484, PropCategory.REGULAR)
    prop.label = "PTP Operating Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "none"
    prop._addConstant("hybrid", "hybrid", 2)
    prop._addConstant("non_hybrid", "non-hybrid", 3)
    prop._addConstant("none", "none", 1)
    meta.props.add("operatingMode", prop)

    prop = PropMeta("str", "prio1", "prio1", 31082, PropCategory.REGULAR)
    prop.label = "PTP priority1"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 255
    prop.defaultValueStr = "255"
    meta.props.add("prio1", prop)

    prop = PropMeta("str", "prio2", "prio2", 31083, PropCategory.REGULAR)
    prop.label = "PTP priority2"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 255)]
    prop.defaultValue = 255
    prop.defaultValueStr = "255"
    meta.props.add("prio2", prop)

    prop = PropMeta("str", "rlB2bLink", "rlB2bLink", 65724, PropCategory.REGULAR)
    prop.label = "Node-level config to enable ptp for RL back to back link"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("rlB2bLink", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcIp", "srcIp", 56016, PropCategory.REGULAR)
    prop.label = "PTP Source Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("srcIp", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "synceConfigIsMissing", "synceConfigIsMissing", 63684, PropCategory.REGULAR)
    prop.label = "Flag to tell if synce config is missing"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("synceConfigIsMissing", prop)

    prop = PropMeta("str", "telecomProfileNotSupported", "telecomProfileNotSupported", 63685, PropCategory.REGULAR)
    prop.label = "Flag to tell Telecom profile not supported on the switch"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("telecomProfileNotSupported", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
