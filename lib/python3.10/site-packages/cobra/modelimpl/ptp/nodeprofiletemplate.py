# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class NodeProfileTemplate(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.ptp.NodeProfileTemplate")

    meta.moClassName = "ptpNodeProfileTemplate"
    meta.rnFormat = "ptpnodeprofiletemplate-%(nodeProfile)s"
    meta.category = MoCategory.REGULAR
    meta.label = "PTP profile template abstract"
    meta.writeAccessMask = 0x4001
    meta.readAccessMask = 0x4001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.infra.Infra")

    meta.rnPrefixes = [
        ('ptpnodeprofiletemplate-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 63675, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 63676, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "nodeDomainDefault", "nodeDomainDefault", 63668, PropCategory.REGULAR)
    prop.label = "Node Domain default value"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodeDomainDefault", prop)

    prop = PropMeta("str", "nodeDomainEnd", "nodeDomainEnd", 63667, PropCategory.REGULAR)
    prop.label = "Node Domain range end"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodeDomainEnd", prop)

    prop = PropMeta("str", "nodeDomainStart", "nodeDomainStart", 63666, PropCategory.REGULAR)
    prop.label = "Node Domain range start"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodeDomainStart", prop)

    prop = PropMeta("str", "nodePrio1Default", "nodePrio1Default", 63671, PropCategory.REGULAR)
    prop.label = "Node priority 1 default value"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio1Default", prop)

    prop = PropMeta("str", "nodePrio1End", "nodePrio1End", 63670, PropCategory.REGULAR)
    prop.label = "Node priority 1 range end"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio1End", prop)

    prop = PropMeta("str", "nodePrio1Start", "nodePrio1Start", 63669, PropCategory.REGULAR)
    prop.label = "Node priority 1 range start"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio1Start", prop)

    prop = PropMeta("str", "nodePrio2Default", "nodePrio2Default", 63674, PropCategory.REGULAR)
    prop.label = "Node priority 2 default value"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio2Default", prop)

    prop = PropMeta("str", "nodePrio2End", "nodePrio2End", 63673, PropCategory.REGULAR)
    prop.label = "Node priority 2 range end"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio2End", prop)

    prop = PropMeta("str", "nodePrio2Start", "nodePrio2Start", 63672, PropCategory.REGULAR)
    prop.label = "Node priority 2 range start"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("nodePrio2Start", prop)

    prop = PropMeta("str", "nodeProfile", "nodeProfile", 63665, PropCategory.REGULAR)
    prop.label = "PTP profile Template Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 4
    prop.defaultValueStr = "telecom_full_path"
    prop._addConstant("telecom_full_path", "telecom-8275-1", 4)
    meta.props.add("nodeProfile", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    meta.namingProps.append(getattr(meta.props, "nodeProfile"))

    def __init__(self, parentMoOrDn, nodeProfile, markDirty=True, **creationProps):
        namingVals = [nodeProfile]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
