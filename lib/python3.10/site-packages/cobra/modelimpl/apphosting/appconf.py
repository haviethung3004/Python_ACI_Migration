# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AppConf(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.apphosting.AppConf")

    meta.moClassName = "apphostingAppConf"
    meta.rnFormat = "appconf-%(appId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "configuration required for app hosting"
    meta.writeAccessMask = 0x80001
    meta.readAccessMask = 0x80001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.apphosting.AppResourceCfg")
    meta.childClasses.add("cobra.model.apphosting.NameSvrEntry")
    meta.childClasses.add("cobra.model.apphosting.RunOpt")
    meta.childClasses.add("cobra.model.apphosting.VnicEntry")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.apphosting.AppResourceCfg", "resource"))
    meta.childNamesAndRnPrefix.append(("cobra.model.apphosting.NameSvrEntry", "namesvr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.apphosting.RunOpt", "runopt-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.apphosting.VnicEntry", "vnic-"))

    meta.parentClasses.add("cobra.model.apphosting.AppHosting")

    meta.rnPrefixes = [
        ('appconf-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 66759, PropCategory.REGULAR)
    prop.label = "Admin state for AppConf config"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "admin-state-to-disable-application-conf", 0)
    prop._addConstant("enabled", "ddmin-state-to-enable-application-conf", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "annotation", "annotation", 66792, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "appCfgState", "appCfgState", 67578, PropCategory.REGULAR)
    prop.label = "exec command of application"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "init"
    prop._addConstant("activate", "activate", 3)
    prop._addConstant("deactivate", "deactivate", 4)
    prop._addConstant("init", "initial-default-install-state", 0)
    prop._addConstant("install", "install", 1)
    prop._addConstant("start", "start", 5)
    prop._addConstant("stop", "stop", 6)
    prop._addConstant("uninstall", "uninstall", 2)
    meta.props.add("appCfgState", prop)

    prop = PropMeta("str", "appCurrState", "appCurrState", 67580, PropCategory.REGULAR)
    prop.label = "application current status set by appmgr"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "init"
    prop._addConstant("activate", "activate-success", 7)
    prop._addConstant("activate_failed", "activate-failed", 9)
    prop._addConstant("activate_in_progress", "activate-is-progress", 8)
    prop._addConstant("deactivate_failed", "deactivate-failed", 12)
    prop._addConstant("deactivate_in_progress", "deactivate-in-progress", 11)
    prop._addConstant("deactivated", "deactivate-success", 10)
    prop._addConstant("init", "initial-default-install-state", 0)
    prop._addConstant("install_failed", "install-failed", 3)
    prop._addConstant("install_in_progress", "install-in-progress", 2)
    prop._addConstant("installed", "install-success", 1)
    prop._addConstant("start_failed", "start-failed", 15)
    prop._addConstant("start_in_progress", "start-in-progress", 14)
    prop._addConstant("started", "start-success", 13)
    prop._addConstant("stop", "stop-success", 16)
    prop._addConstant("stop_failed", "stop-failed", 18)
    prop._addConstant("stop_in_progress", "stop-in-progress", 17)
    prop._addConstant("uninstall_failed", "uninstall-failed", 6)
    prop._addConstant("uninstall_in_progress", "uninstall-in-progress", 5)
    prop._addConstant("uninstalled", "uninstall-success", 4)
    meta.props.add("appCurrState", prop)

    prop = PropMeta("str", "appErrCode", "appErrCode", 67588, PropCategory.REGULAR)
    prop.label = "application config error code"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "err_none"
    prop._addConstant("err_activate_fail", "activate-failed", 7)
    prop._addConstant("err_backend_write", "back-end-config-write-error", 3)
    prop._addConstant("err_deactivate_fail", "deactivate-failed", 8)
    prop._addConstant("err_install_fail", "install-failed", 5)
    prop._addConstant("err_invalid_conf", "invalid-config-input", 2)
    prop._addConstant("err_mem_alloc", "memory-allocation-error", 4)
    prop._addConstant("err_none", "no-error", 0)
    prop._addConstant("err_other", "other-error-code", 1)
    prop._addConstant("err_start_fail", "start-failed", 9)
    prop._addConstant("err_stop_fail", "stop-failed", 10)
    prop._addConstant("err_uninstall_fail", "uninstall-failed", 6)
    meta.props.add("appErrCode", prop)

    prop = PropMeta("str", "appErrStr", "appErrStr", 67589, PropCategory.REGULAR)
    prop.label = "error string set by apphosting"
    prop.isOper = True
    prop.range = [(0, 512)]
    meta.props.add("appErrStr", prop)

    prop = PropMeta("str", "appId", "appId", 66760, PropCategory.REGULAR)
    prop.label = "unique id to identify the application"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    meta.props.add("appId", prop)

    prop = PropMeta("str", "appMaxCpu", "appMaxCpu", 67583, PropCategory.REGULAR)
    prop.label = "maximum cpu limit of app"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("appMaxCpu", prop)

    prop = PropMeta("str", "appMaxDisk", "appMaxDisk", 67585, PropCategory.REGULAR)
    prop.label = "maximum disk allocation of app"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("appMaxDisk", prop)

    prop = PropMeta("str", "appMaxMem", "appMaxMem", 67584, PropCategory.REGULAR)
    prop.label = "maximum memory allocation of app"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("appMaxMem", prop)

    prop = PropMeta("str", "appParamList", "appParamList", 67586, PropCategory.REGULAR)
    prop.label = "application parameter list e.g: '--hostname N9K-GX4'"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("appParamList", prop)

    prop = PropMeta("str", "appParamListExt", "appParamListExt", 67587, PropCategory.REGULAR)
    prop.label = "extended application parameter list"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("appParamListExt", prop)

    prop = PropMeta("str", "appPkgName", "appPkgName", 67581, PropCategory.REGULAR)
    prop.label = "complete URL path of application."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("appPkgName", prop)

    prop = PropMeta("str", "apphostingCfgFailedBmp", "apphostingCfgFailedBmp", 67596, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("apphosting:AppConfadminSt_failed_flag", None, 1)
    prop._addConstant("apphosting:AppConfannotation_failed_flag", None, 2)
    prop._addConstant("apphosting:AppConfappCfgState_failed_flag", None, 4)
    prop._addConstant("apphosting:AppConfappId_failed_flag", None, 64)
    prop._addConstant("apphosting:AppConfappMaxCpu_failed_flag", None, 128)
    prop._addConstant("apphosting:AppConfappMaxDisk_failed_flag", None, 256)
    prop._addConstant("apphosting:AppConfappMaxMem_failed_flag", None, 512)
    prop._addConstant("apphosting:AppConfappParamListExt_failed_flag", None, 2048)
    prop._addConstant("apphosting:AppConfappParamList_failed_flag", None, 1024)
    prop._addConstant("apphosting:AppConfappPkgName_failed_flag", None, 4096)
    prop._addConstant("apphosting:AppConfconfigIssues_failed_flag", None, 131072)
    prop._addConstant("apphosting:AppConfextMngdBy_failed_flag", None, 524288)
    prop._addConstant("apphosting:AppConfgwIpV4Addr_failed_flag", None, 1048576)
    prop._addConstant("apphosting:AppConfgwIpV4IntfIdx_failed_flag", None, 2097152)
    prop._addConstant("apphosting:AppConfgwIpV6Addr_failed_flag", None, 4194304)
    prop._addConstant("apphosting:AppConfgwIpV6IntfIdx_failed_flag", None, 8388608)
    prop._addConstant("apphosting:AppConflcOwn_failed_flag", None, 9223372036854775808)
    prop._addConstant("apphosting:AppConfmodTs_failed_flag", None, 1152921504606846976)
    prop._addConstant("apphosting:AppConfmonPolDn_failed_flag", None, 16777216)
    prop._addConstant("apphosting:AppConfpkgOpts_failed_flag", None, 33554432)
    prop._addConstant("apphosting:AppConfswitchIntf_failed_flag", None, 67108864)
    prop._addConstant("apphosting:AppConfuid_failed_flag", None, 4611686018427387904)
    prop._addConstant("apphosting:AppConfuserdom_failed_flag", None, 2305843009213693952)
    meta.props.add("apphostingCfgFailedBmp", prop)

    prop = PropMeta("str", "apphostingCfgFailedTs", "apphostingCfgFailedTs", 67598, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("apphostingCfgFailedTs", prop)

    prop = PropMeta("str", "apphostingCfgState", "apphostingCfgState", 67597, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("apphostingCfgState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 69171, PropCategory.REGULAR)
    prop.label = "Config Issues"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("non-border-leaf", "non-border-leaf", 1)
    prop._addConstant("non-ipn-spine", "non-ipn-spine", 4)
    prop._addConstant("non-remote-leaf", "non-remote-leaf", 2)
    prop._addConstant("none", "n/a", 0)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "currAppState", "currAppState", 68678, PropCategory.REGULAR)
    prop.label = "application current status set by appmgr"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "init"
    prop._addConstant("activate", "activate", 3)
    prop._addConstant("deactivate", "deactivate", 4)
    prop._addConstant("init", "initial-default-install-state", 0)
    prop._addConstant("install", "install", 1)
    prop._addConstant("start", "start", 5)
    prop._addConstant("stop", "stop", 6)
    prop._addConstant("uninstall", "uninstall", 2)
    meta.props.add("currAppState", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 66793, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "gwIpV4Addr", "gwIpV4Addr", 66761, PropCategory.REGULAR)
    prop.label = "default gateway ip v4 address for the container."
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("gwIpV4Addr", prop)

    prop = PropMeta("str", "gwIpV4IntfIdx", "gwIpV4IntfIdx", 66762, PropCategory.REGULAR)
    prop.label = "guest interface index (ipv4). e.g: specify '0' for interface eth0 inside the container"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 3)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("gwIpV4IntfIdx", prop)

    prop = PropMeta("str", "gwIpV6Addr", "gwIpV6Addr", 66763, PropCategory.REGULAR)
    prop.label = "default gateway ip v6 address for the container."
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("gwIpV6Addr", prop)

    prop = PropMeta("str", "gwIpV6IntfIdx", "gwIpV6IntfIdx", 66764, PropCategory.REGULAR)
    prop.label = "guest interface index (ipv6)."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 3)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("gwIpV6IntfIdx", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 69176, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "pkgOpts", "pkgOpts", 66765, PropCategory.REGULAR)
    prop.label = "over write or append the run-opts. default value is 'over-write'."
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "append"
    prop._addConstant("append", "append-the-run-options-with-package-run-options.", 0)
    prop._addConstant("over-write", "over-write-the-docker-package-run-options.", 1)
    meta.props.add("pkgOpts", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "switchIntf", "switchIntf", 67582, PropCategory.REGULAR)
    prop.label = "vrf id to bind with opt socket"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 64)]
    meta.props.add("switchIntf", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    meta.namingProps.append(getattr(meta.props, "appId"))

    def __init__(self, parentMoOrDn, appId, markDirty=True, **creationProps):
        namingVals = [appId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
