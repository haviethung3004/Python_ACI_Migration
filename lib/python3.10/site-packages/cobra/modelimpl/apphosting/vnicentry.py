# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class VnicEntry(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.apphosting.VnicEntry")

    meta.moClassName = "apphostingVnicEntry"
    meta.rnFormat = "vnic-%(guestIntfId)s"
    meta.category = MoCategory.REGULAR
    meta.label = "app vnic entry table"
    meta.writeAccessMask = 0x80001
    meta.readAccessMask = 0x80001
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))

    meta.parentClasses.add("cobra.model.apphosting.AppConf")

    meta.rnPrefixes = [
        ('vnic-', True),
    ]

    prop = PropMeta("str", "adminSt", "adminSt", 66766, PropCategory.REGULAR)
    prop.label = "admin state to enable or disable vnic entry."
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "admin-state-to-disable-application-conf", 0)
    prop._addConstant("enabled", "ddmin-state-to-enable-application-conf", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "annotation", "annotation", 66794, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "apphostingCfgFailedBmp", "apphostingCfgFailedBmp", 67599, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("apphosting:VnicEntryadminSt_failed_flag", None, 1)
    prop._addConstant("apphosting:VnicEntryannotation_failed_flag", None, 2)
    prop._addConstant("apphosting:VnicEntryextMngdBy_failed_flag", None, 64)
    prop._addConstant("apphosting:VnicEntryguestIntfId_failed_flag", None, 128)
    prop._addConstant("apphosting:VnicEntryhostIntf_failed_flag", None, 256)
    prop._addConstant("apphosting:VnicEntryipV4Addr_failed_flag", None, 512)
    prop._addConstant("apphosting:VnicEntryipV6Addr_failed_flag", None, 1024)
    prop._addConstant("apphosting:VnicEntrylcOwn_failed_flag", None, 9223372036854775808)
    prop._addConstant("apphosting:VnicEntrymodTs_failed_flag", None, 1152921504606846976)
    prop._addConstant("apphosting:VnicEntryp2pBridgeVrf_failed_flag", None, 2048)
    prop._addConstant("apphosting:VnicEntryuid_failed_flag", None, 4611686018427387904)
    prop._addConstant("apphosting:VnicEntryuserdom_failed_flag", None, 2305843009213693952)
    meta.props.add("apphostingCfgFailedBmp", prop)

    prop = PropMeta("str", "apphostingCfgFailedTs", "apphostingCfgFailedTs", 67601, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("apphostingCfgFailedTs", prop)

    prop = PropMeta("str", "apphostingCfgState", "apphostingCfgState", 67600, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("apphostingCfgState", prop)

    prop = PropMeta("str", "cfgOperSt", "cfgOperSt", 67590, PropCategory.REGULAR)
    prop.label = "config operational status set by apphosting"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("disabled", "disabled", 1)
    prop._addConstant("enabled", "enabled", 2)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("cfgOperSt", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 66795, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "guestIntfId", "guestIntfId", 66768, PropCategory.REGULAR)
    prop.label = "guest interface identifier. e.g: '0' will appear as eth0 inside the container"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(0, 3)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("guestIntfId", prop)

    prop = PropMeta("str", "hostIntf", "hostIntf", 66767, PropCategory.REGULAR)
    prop.label = "application host interface type. e.g: 'management' or 'bridge[1-8]'"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "management"
    prop._addConstant("bridge1", "bridge-1-inteface", 1)
    prop._addConstant("bridge2", "bridge-2-inteface", 2)
    prop._addConstant("bridge3", "bridge-3-inteface", 3)
    prop._addConstant("bridge4", "bridge-4-inteface", 4)
    prop._addConstant("bridge5", "bridge-5-inteface", 5)
    prop._addConstant("bridge6", "bridge-6-inteface", 6)
    prop._addConstant("bridge7", "bridge-7-inteface", 7)
    prop._addConstant("bridge8", "bridge-8-inteface", 8)
    prop._addConstant("management", "management-interface", 0)
    meta.props.add("hostIntf", prop)

    prop = PropMeta("str", "ipV4Addr", "ipV4Addr", 66769, PropCategory.REGULAR)
    prop.label = "v4 ip address of the interface"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("ipV4Addr", prop)

    prop = PropMeta("str", "ipV6Addr", "ipV6Addr", 66770, PropCategory.REGULAR)
    prop.label = "v6 ip address for interface"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("ipV6Addr", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "p2pBridgeVrf", "p2pBridgeVrf", 69462, PropCategory.REGULAR)
    prop.label = "point to point bridge vrf name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 32)]
    prop.defaultValue = "default"
    prop.defaultValueStr = "default"
    meta.props.add("p2pBridgeVrf", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    meta.namingProps.append(getattr(meta.props, "guestIntfId"))

    def __init__(self, parentMoOrDn, guestIntfId, markDirty=True, **creationProps):
        namingVals = [guestIntfId]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
