# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class KaP(Mo):
    """
     This object holds keepalive policy information 

    """

    meta = ClassMeta("cobra.model.bfd.KaP")

    meta.moClassName = "bfdKaP"
    meta.rnFormat = "ka"
    meta.category = MoCategory.REGULAR
    meta.label = "Keepalive Policy information is held in this object"
    meta.writeAccessMask = 0x41
    meta.readAccessMask = 0x41
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.bfd.IfAf")
    meta.parentClasses.add("cobra.model.bfd.Inst")
    meta.parentClasses.add("cobra.model.bfd.InstAf")

    meta.rnPrefixes = [
        ('ka', False),
    ]

    prop = PropMeta("str", "annotation", "annotation", 69651, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "bfdCfgFailedBmp", "bfdCfgFailedBmp", 23275, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("bfd:KaPannotation_failed_flag", None, 1)
    prop._addConstant("bfd:KaPdetectMult_failed_flag", None, 16)
    prop._addConstant("bfd:KaPechoRxIntvl_failed_flag", None, 32)
    prop._addConstant("bfd:KaPextMngdBy_failed_flag", None, 64)
    prop._addConstant("bfd:KaPlcOwn_failed_flag", None, 9223372036854775808)
    prop._addConstant("bfd:KaPminRxIntvl_failed_flag", None, 128)
    prop._addConstant("bfd:KaPminTxIntvl_failed_flag", None, 256)
    prop._addConstant("bfd:KaPmodTs_failed_flag", None, 1152921504606846976)
    prop._addConstant("bfd:KaPmonPolDn_failed_flag", None, 512)
    prop._addConstant("bfd:KaPuid_failed_flag", None, 4611686018427387904)
    prop._addConstant("bfd:KaPuserdom_failed_flag", None, 2305843009213693952)
    meta.props.add("bfdCfgFailedBmp", prop)

    prop = PropMeta("str", "bfdCfgFailedTs", "bfdCfgFailedTs", 23277, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bfdCfgFailedTs", prop)

    prop = PropMeta("str", "bfdCfgState", "bfdCfgState", 23276, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("bfdCfgState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "detectMult", "detectMult", 17069, PropCategory.REGULAR)
    prop.label = "Detection Multiplier. This is the desired detection time multiplier for BFD packets on the local system."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 50)]
    prop.defaultValue = 3
    prop.defaultValueStr = "3"
    meta.props.add("detectMult", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "echoRxIntvl", "echoRxIntvl", 17070, PropCategory.REGULAR)
    prop.label = "Echo Rx Interval. This is the minimum interval,in ms, between received BFD echo packets that this system is capable of supporting."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 999)]
    prop.defaultValue = 50
    prop.defaultValueStr = "50"
    meta.props.add("echoRxIntvl", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 69652, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "minRxIntvl", "minRxIntvl", 17068, PropCategory.REGULAR)
    prop.label = "Required Minimum RX Interval. This is the minimum interval, in ms, between received BFD control packets that this system is capable of supporting."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(50, 999)]
    prop.defaultValue = 50
    prop.defaultValueStr = "50"
    meta.props.add("minRxIntvl", prop)

    prop = PropMeta("str", "minTxIntvl", "minTxIntvl", 17067, PropCategory.REGULAR)
    prop.label = "Desired Minimum TX Interval.This is the minimum interval, in ms, that the system would like to use when transmitting BFD control packets."
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(50, 999)]
    prop.defaultValue = 50
    prop.defaultValueStr = "50"
    meta.props.add("minTxIntvl", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 24881, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
