# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Nexthop(Mo):
    """
    A URIB next hop database record.

    """

    meta = ClassMeta("cobra.model.uribv4.Nexthop")

    meta.moClassName = "uribv4Nexthop"
    meta.rnFormat = "nh-[%(owner)s]-[%(addr)s]-[%(if)s]-[%(vrf)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Nexthop Record"
    meta.writeAccessMask = 0x986d
    meta.readAccessMask = 0x986d
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes15min")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1d")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1h")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1mo")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1qtr")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1w")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes1year")
    meta.childClasses.add("cobra.model.uribv4.EgrBytes5min")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist15min")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1d")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1h")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1mo")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1qtr")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1w")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist1year")
    meta.childClasses.add("cobra.model.uribv4.EgrBytesHist5min")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts15min")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1d")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1h")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1mo")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1qtr")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1w")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts1year")
    meta.childClasses.add("cobra.model.uribv4.EgrPkts5min")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist15min")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1d")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1h")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1mo")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1qtr")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1w")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist1year")
    meta.childClasses.add("cobra.model.uribv4.EgrPktsHist5min")
    meta.childClasses.add("cobra.model.uribv4.MplsNexthop")
    meta.childClasses.add("cobra.model.uribv4.RtRouteOwnerToNexthopAtt")

    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.RtRouteOwnerToNexthopAtt", "rtRouteOwnerToNexthopAtt"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist15min", "HDuribv4EgrBytes15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1year", "HDuribv4EgrBytes1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes15min", "CDuribv4EgrBytes15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1year", "CDuribv4EgrBytes1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1qtr", "HDuribv4EgrBytes1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist5min", "HDuribv4EgrBytes5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist15min", "HDuribv4EgrPkts15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1year", "HDuribv4EgrPkts1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1qtr", "CDuribv4EgrBytes1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes5min", "CDuribv4EgrBytes5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1mo", "HDuribv4EgrBytes1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts15min", "CDuribv4EgrPkts15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1year", "CDuribv4EgrPkts1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1qtr", "HDuribv4EgrPkts1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist5min", "HDuribv4EgrPkts5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1mo", "CDuribv4EgrBytes1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1d", "HDuribv4EgrBytes1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1h", "HDuribv4EgrBytes1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytesHist1w", "HDuribv4EgrBytes1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1qtr", "CDuribv4EgrPkts1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts5min", "CDuribv4EgrPkts5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1mo", "HDuribv4EgrPkts1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1d", "CDuribv4EgrBytes1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1h", "CDuribv4EgrBytes1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrBytes1w", "CDuribv4EgrBytes1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1mo", "CDuribv4EgrPkts1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1d", "HDuribv4EgrPkts1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1h", "HDuribv4EgrPkts1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPktsHist1w", "HDuribv4EgrPkts1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1d", "CDuribv4EgrPkts1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1h", "CDuribv4EgrPkts1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.EgrPkts1w", "CDuribv4EgrPkts1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.uribv4.MplsNexthop", "mpls-"))

    meta.parentClasses.add("cobra.model.uribv4.Route")
    meta.parentClasses.add("cobra.model.uribv4.RouteOwner")

    meta.superClasses.add("cobra.model.rib.DbRec")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.DbRec")
    meta.superClasses.add("cobra.model.l3.DbRec")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('nh-', True),
        ('-', True),
        ('-', True),
        ('-', True),
    ]

    prop = PropMeta("str", "Nhmetric", "Nhmetric", 19048, PropCategory.REGULAR)
    prop.label = "NhMetric"
    prop.isOper = True
    prop.range = [(1, 4294967295)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("Nhmetric", prop)

    prop = PropMeta("str", "Nhtag", "Nhtag", 19049, PropCategory.REGULAR)
    prop.label = "NhTag"
    prop.isOper = True
    prop.range = [(0, 4294967295)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("Nhtag", prop)

    prop = PropMeta("str", "PcTag", "PcTag", 65441, PropCategory.REGULAR)
    prop.label = "PcTag"
    prop.isOper = True
    prop.range = [(0, 65535)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("PcTag", prop)

    prop = PropMeta("str", "active", "active", 4336, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("active", prop)

    prop = PropMeta("str", "addr", "addr", 4328, PropCategory.REGULAR)
    prop.label = "Nexthop Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("addr", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "createTs", "createTs", 4335, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("createTs", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "if", "if", 4329, PropCategory.REGULAR)
    prop.label = "Nexthop Interface"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("if", prop)

    prop = PropMeta("str", "metric", "metric", 4332, PropCategory.REGULAR)
    prop.label = "Metric"
    prop.isOper = True
    prop.range = [(1, 4294967295)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("metric", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 59537, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mplsLabel", "mplsLabel", 58944, PropCategory.REGULAR)
    prop.label = "mplsLabel"
    prop.isOper = True
    prop.range = [(0, 1048575)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("mplsLabel", prop)

    prop = PropMeta("str", "name", "name", 16437, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "owner", "owner", 4327, PropCategory.REGULAR)
    prop.label = "Nexthop Owner"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("owner", prop)

    prop = PropMeta("str", "pref", "pref", 4331, PropCategory.REGULAR)
    prop.label = "Preference"
    prop.isOper = True
    prop.range = [(1, 65535)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("pref", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "routeType", "routeType", 4333, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "direct"
    prop._addConstant("coop", "coop", 30)
    prop._addConstant("direct", "direct", 1)
    prop._addConstant("discard", "discard", 23)
    prop._addConstant("ebgp", "ebgp", 20)
    prop._addConstant("eigrp-external", "eigrp-external", 25)
    prop._addConstant("eigrp-internal", "eigrp-internal", 24)
    prop._addConstant("embgp", "embgp", 22)
    prop._addConstant("ibgp", "ibgp", 19)
    prop._addConstant("imbgp", "imbgp", 21)
    prop._addConstant("isis-l1", "isis-l1", 5)
    prop._addConstant("isis-l1-ext", "isis-l1-ext", 32)
    prop._addConstant("isis-l1-int", "isis-l1-int", 31)
    prop._addConstant("isis-l2", "isis-l2", 6)
    prop._addConstant("local", "local", 33)
    prop._addConstant("mcast-static", "multicast-static", 3)
    prop._addConstant("ospf-inter", "ospf-inter", 8)
    prop._addConstant("ospf-intra", "ospf-intra", 7)
    prop._addConstant("ospf-nssa-type1", "ospf-nssa-type1", 11)
    prop._addConstant("ospf-nssa-type2", "ospf-nssa-type2", 12)
    prop._addConstant("ospf-type1", "ospf-type1", 9)
    prop._addConstant("ospf-type2", "ospf-type2", 10)
    prop._addConstant("ospfv3-inter", "ospfv3-inter", 14)
    prop._addConstant("ospfv3-intra", "ospfv3-intra", 13)
    prop._addConstant("ospfv3-nssa-type1", "ospfv3-nssa-type1", 17)
    prop._addConstant("ospfv3-nssa-type2", "ospfv3-nssa-type2", 18)
    prop._addConstant("ospfv3-type1", "ospfv3-type1", 15)
    prop._addConstant("ospfv3-type2", "ospfv3-type2", 16)
    prop._addConstant("rip", "rip", 4)
    prop._addConstant("static", "static", 2)
    meta.props.add("routeType", prop)

    prop = PropMeta("str", "rwVnid", "rwVnid", 54906, PropCategory.REGULAR)
    prop.label = "rwVnid"
    prop.isOper = True
    meta.props.add("rwVnid", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tag", "tag", 4337, PropCategory.REGULAR)
    prop.label = "Tag"
    prop.isOper = True
    prop.range = [(0, 4294967295)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("tag", prop)

    prop = PropMeta("str", "type", "type", 4334, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop.defaultValue = 1
    prop.defaultValueStr = "attached"
    prop._addConstant("attached", "attached", 1)
    prop._addConstant("direct", "direct", 4)
    prop._addConstant("limited-directed-bcast", "limited-or-directed-broadcast", 8)
    prop._addConstant("local", "local", 2)
    prop._addConstant("pervasive", "pervasive", 128)
    prop._addConstant("recursive", "recursive", 16)
    prop._addConstant("redist-only", "redist-only", 262144)
    prop._addConstant("table", "table", 32)
    prop._addConstant("wildcard", "wildcard", 64)
    meta.props.add("type", prop)

    prop = PropMeta("str", "vrf", "vrf", 4330, PropCategory.REGULAR)
    prop.label = "Nexthop VRF"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("vrf", prop)

    meta.namingProps.append(getattr(meta.props, "owner"))
    getattr(meta.props, "owner").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "addr"))
    getattr(meta.props, "addr").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "if"))
    getattr(meta.props, "if").needDelimiter = True
    meta.namingProps.append(getattr(meta.props, "vrf"))
    getattr(meta.props, "vrf").needDelimiter = True

    def __init__(self, parentMoOrDn, owner, addr, if_, vrf, markDirty=True, **creationProps):
        namingVals = [owner, addr, if_, vrf]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
