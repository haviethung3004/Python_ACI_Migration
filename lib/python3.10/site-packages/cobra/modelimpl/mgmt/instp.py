# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class InstP(Mo):
    """
    The external management entity instance profile communicates with nodes that are part of out-of-band management endpoint group. To enable this communication, a contract is required between the instance profile and the out-of-band management endpoint group.

    """

    meta = ClassMeta("cobra.model.mgmt.InstP")

    meta.moClassName = "mgmtInstP"
    meta.rnFormat = "instp-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "External Management Network Instance Profile"
    meta.writeAccessMask = 0x605
    meta.readAccessMask = 0x81607
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.fv.RInfoHolder")
    meta.childClasses.add("cobra.model.fv.RtARemoteHostToEpg")
    meta.childClasses.add("cobra.model.fv.RtDcProfToEpg")
    meta.childClasses.add("cobra.model.fv.RtDcToEpg")
    meta.childClasses.add("cobra.model.fv.RtEpg")
    meta.childClasses.add("cobra.model.fv.RtNtpProvToEpg")
    meta.childClasses.add("cobra.model.fv.RtProfileToEpg")
    meta.childClasses.add("cobra.model.fv.RtSecProvToEpg")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.mgmt.RsInstPCtx")
    meta.childClasses.add("cobra.model.mgmt.RsOoBCons")
    meta.childClasses.add("cobra.model.mgmt.Subnet")
    meta.childClasses.add("cobra.model.tag.AliasDelInst")
    meta.childClasses.add("cobra.model.tag.AliasInst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.ExtMngdInst")
    meta.childClasses.add("cobra.model.tag.Inst")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtARemoteHostToEpg", "rtfileARemoteHostToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtNtpProvToEpg", "rtdatetimeNtpProvToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtProfileToEpg", "rtdnsProfileToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtSecProvToEpg", "rtaaaSecProvToEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtDcProfToEpg", "rtdcProfToEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtEpg", "rtsnmpEpg-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.RsInstPCtx", "rsinstPCtx"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.RsOoBCons", "rsooBCons-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RtDcToEpg", "rtdcToEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasDelInst", "aliasdel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mgmt.Subnet", "subnet-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.ExtMngdInst", "extmngd"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.AliasInst", "alias"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Inst", "tag-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fv.RInfoHolder", "to-"))

    meta.parentClasses.add("cobra.model.mgmt.ExtMgmtEntity")

    meta.superClasses.add("cobra.model.pol.Comp")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.fv.ATg")
    meta.superClasses.add("cobra.model.fv.Comp")

    meta.rnPrefixes = [
        ('instp-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 37694, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 1715, PropCategory.REGULAR)
    prop.label = "Config Issues"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("allow-useg-inconsistent", "allow-useg-flag-inconsistent-across-vmm-domain-(dvs)-attaches", 2048)
    prop._addConstant("bd-id-not-allocated", "bd-ids-not-allocated", 256)
    prop._addConstant("bd-not-present", "bd-not-present", 1)
    prop._addConstant("context-id-not-allocated", "context-ids-not-allocated", 512)
    prop._addConstant("context-not-present", "context-not-present.-configure-context-and/or-attach-context-to-bridge-group-domain-for-application-epg-or-attach-context-to-esg-for-security-group.", 2)
    prop._addConstant("encap-assignment", "encapsulation-not-valid", 8)
    prop._addConstant("esg-association-contract-inheritance-present", "security-features-(contract-inheritance)-present-on-the-epg-mapped-to-an-esg-via-an-epg-selector-(fvepgselector).-once-appropriate-contract-configuration-is-done-on-the-esg,-delete-any-contract-association-on-this-epg.", 16384)
    prop._addConstant("esg-association-contract-present", "security-features-(contract-association)-present-on-the-epg-mapped-to-an-esg-via-an-epg-selector-(fvepgselector).-once-appropriate-contract-configuration-is-done-on-the-esg,-delete-any-contract-association-on-this-epg.", 8192)
    prop._addConstant("esg-association-contract-taboo-present", "security-features-(taboo-contract)-present-on-the-epg-mapped-to-an-esg-via-an-epg-selector-(fvepgselector).-once-appropriate-contract-configuration-is-done-on-the-esg,-delete-any-contract-association-on-this-epg.", 32768)
    prop._addConstant("esg-tag-selector-match-obj-not-associated", "a-tag-selector-is-matching-an-object,-but-the-object-is-not-associated-to-this-esg-since-it-is-matching-multiple-esg-tag-selectors-at-the-same-time.-check-under-esg--->-operational-->-tag-selectors-tab-for-further-information", 65536)
    prop._addConstant("id-not-allocated", "ids-not-allocated", 4)
    prop._addConstant("incorrect-active-standby-uplink-order", "incorrect-active/standby-config.-active-uplink-cannot-be-empty-or-null-if-standby-uplink-is-configured-or-active-uplink-can-not-be-0-as-no-uplink-get-assigned-in-the-vcenter.", 131072)
    prop._addConstant("instrimedcy-unsupported", "on-demand-deployment-immediacy-is-not-supported-for-useg-epg-associated-to-vmware-dvs-domain", 1024)
    prop._addConstant("invalid-rel-to-rtctrlProfile", "invalid-association-to-route-control-policy", 32)
    prop._addConstant("l3port-and-sub-interface-on-path", "l3-port-and-sub-interface-not-allowed-on-same-path", 128)
    prop._addConstant("no-conslbl-association", "no-consumer-label-association-for-the-mpls-external-epg", 4096)
    prop._addConstant("none", "none", 0)
    prop._addConstant("not-associated-with-mgmt-zone", "not-associated-with-management-zone", 64)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "configSt", "configSt", 1714, PropCategory.REGULAR)
    prop.label = "Deployment Status"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "not-applied"
    prop._addConstant("applied", "applied", 2)
    prop._addConstant("applying", "applying", 1)
    prop._addConstant("failed-to-apply", "failed-to-apply", 3)
    prop._addConstant("not-applied", "not-applied", 0)
    prop._addConstant("temp-failed-to-apply", "temp-failed-to-apply", 4)
    meta.props.add("configSt", prop)

    prop = PropMeta("str", "descr", "descr", 5582, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 39833, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14348, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 6927, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "pcTag", "pcTag", 1717, PropCategory.REGULAR)
    prop.label = "Policy Enforcement Tag"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("any", "any", 0)
    meta.props.add("pcTag", prop)

    prop = PropMeta("str", "pcTagAllocSrc", "pcTagAllocSrc", 63907, PropCategory.REGULAR)
    prop.label = "pcTag Allocation Source"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "idmanager"
    prop._addConstant("esg", "esg", 1)
    prop._addConstant("idmanager", "id-manager", 0)
    prop._addConstant("mso", "mso", 2)
    meta.props.add("pcTagAllocSrc", prop)

    prop = PropMeta("str", "prio", "prio", 1718, PropCategory.REGULAR)
    prop.label = "QOS Class"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 9)]
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("level1", "level1", 3)
    prop._addConstant("level2", "level2", 2)
    prop._addConstant("level3", "level3-(default)", 1)
    prop._addConstant("level4", "level4", 9)
    prop._addConstant("level5", "level5", 8)
    prop._addConstant("level6", "level6", 7)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("prio", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 1716, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 16777215)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("scope", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Path"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ATgToGraphInst", "Graph Instances", "cobra.model.vns.GraphInst"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("MgmtInstPToNode", "External Management Network EPG to Node", "cobra.model.fv.Locale"))

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
