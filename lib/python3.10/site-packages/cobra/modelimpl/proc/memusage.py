# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class MemUsage(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.proc.MemUsage")

    meta.moClassName = "procMemUsage"
    meta.rnFormat = "memusage-%(Modname)s"
    meta.category = MoCategory.REGULAR
    meta.label = "System Process Information"
    meta.writeAccessMask = 0x80001
    meta.readAccessMask = 0x80001
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.proc.MemoryUsage15min")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1d")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1h")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1mo")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1qtr")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1w")
    meta.childClasses.add("cobra.model.proc.MemoryUsage1year")
    meta.childClasses.add("cobra.model.proc.MemoryUsage5min")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist15min")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1d")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1h")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1mo")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1qtr")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1w")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist1year")
    meta.childClasses.add("cobra.model.proc.MemoryUsageHist5min")

    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist15min", "HDprocMemoryUsage15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1year", "HDprocMemoryUsage1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage15min", "CDprocMemoryUsage15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1year", "CDprocMemoryUsage1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1qtr", "HDprocMemoryUsage1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist5min", "HDprocMemoryUsage5min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1qtr", "CDprocMemoryUsage1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage5min", "CDprocMemoryUsage5min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1mo", "HDprocMemoryUsage1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1mo", "CDprocMemoryUsage1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1d", "HDprocMemoryUsage1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1h", "HDprocMemoryUsage1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsageHist1w", "HDprocMemoryUsage1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1d", "CDprocMemoryUsage1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1h", "CDprocMemoryUsage1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.proc.MemoryUsage1w", "CDprocMemoryUsage1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.proc.Memory")

    meta.rnPrefixes = [
        ('memusage-', True),
    ]

    prop = PropMeta("str", "Free", "Free", 67719, PropCategory.REGULAR)
    prop.label = "Free Memory in the system"
    prop.isOper = True
    prop.range = [(1, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("Free", prop)

    prop = PropMeta("str", "Modname", "Modname", 67716, PropCategory.REGULAR)
    prop.label = "Name of module LC/FM/SUP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 128)]
    meta.props.add("Modname", prop)

    prop = PropMeta("str", "PercUsedMemory", "PercUsedMemory", 67715, PropCategory.REGULAR)
    prop.label = "Percentage of Memory Allocated"
    prop.isOper = True
    prop.range = [(1, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("PercUsedMemory", prop)

    prop = PropMeta("str", "Total", "Total", 67717, PropCategory.REGULAR)
    prop.label = "Total Memory in the system"
    prop.isOper = True
    prop.range = [(1, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("Total", prop)

    prop = PropMeta("str", "Used", "Used", 67718, PropCategory.REGULAR)
    prop.label = "Used Memory in the system"
    prop.isOper = True
    prop.range = [(1, 100)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("Used", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "memAlert", "memAlert", 67720, PropCategory.REGULAR)
    prop.label = "Memory Alert Level"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "normal"
    prop._addConstant("critical", "critical", 3)
    prop._addConstant("major", "major", 2)
    prop._addConstant("minor", "minor", 1)
    prop._addConstant("normal", "normal", 0)
    meta.props.add("memAlert", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 67722, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    meta.namingProps.append(getattr(meta.props, "Modname"))

    def __init__(self, parentMoOrDn, Modname, markDirty=True, **creationProps):
        namingVals = [Modname]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
