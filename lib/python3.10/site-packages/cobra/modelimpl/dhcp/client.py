# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Client(Mo):
    """
    A DHCP client, which allows a device to act as a host requesting configuration parameters, such as an IP address, from a DHCP server.

    """

    meta = ClassMeta("cobra.model.dhcp.Client")

    meta.moClassName = "dhcpClient"
    meta.rnFormat = "client-[%(id)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "Client"
    meta.writeAccessMask = 0x2001
    meta.readAccessMask = 0xb049
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = True

    meta.childClasses.add("cobra.model.dhcp.ExtIf")
    meta.childClasses.add("cobra.model.dhcp.RtClient")
    meta.childClasses.add("cobra.model.dhcp.RtClientRel")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")

    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.RtClientRel", "rtpolClientRel-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.RtClient", "rtclient"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.dhcp.ExtIf", "if-"))

    meta.parentClasses.add("cobra.model.top.Root")

    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('client-', True),
    ]

    prop = PropMeta("str", "capabilities", "capabilities", 21384, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("multi-pod-bringup", "multi-pod-bringup", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("capabilities", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clientEvent", "clientEvent", 1163, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "pending"
    prop._addConstant("assigned", "client-ip-address-request-successed.", 2)
    prop._addConstant("denied", "client-ip-address-request-denied.", 3)
    prop._addConstant("none", "none", 0)
    prop._addConstant("pending", "client-ip-address-request-in-pending-state.", 1)
    prop._addConstant("requesting", "client-ip-address-requested.", 5)
    prop._addConstant("role-mismatch", "node-role-mismatch", 4)
    meta.props.add("clientEvent", prop)

    prop = PropMeta("str", "configIssues", "configIssues", 27791, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("Wrong-fabric-id", "the-fabric-id-for-the-node-does-not-match-with-this-fabric.-perform-setup-clean-config.sh-on-the-node-to-re-register.", 16)
    prop._addConstant("catalog-loading-failed", "failed-to-load-compatibility-catalog-file", 8192)
    prop._addConstant("ctrlr-catalog-not-found", "switch-is-not-supported-in-running-apic-version", 4096)
    prop._addConstant("duplicate-ip", "the-same-tep-ip-address-is-allocated-to-another-node.-decommission-the-node-to-clear-the-duplicate-tep.", 4)
    prop._addConstant("image-not-found", "compatible-bit-image-not-found-for-switch", 512)
    prop._addConstant("invalid-podid", "pod-id-for-the-node-is-not-recognized-by-apic.-navigate-to-fabric->-inventory->-pod-fabric-setup-policy-to-address-the-issue.", 2)
    prop._addConstant("max-vleaf-pending-lease", "max-number-of-pending-lease-for-vleaf.-this-is-usually-raised-due-to-a-dhcp-discover-packets-flood.", 64)
    prop._addConstant("no-autoupgrade-policy", "there-is-no-auto-upgrade-policy-configured-during-poap-conversion", 256)
    prop._addConstant("no-ip-addr-available", "unable-to-allocate-an-ip-address-to-the-node,-as-there-is-not-currently-an-available-ip-in-the-tep-pool.", 1)
    prop._addConstant("no-tep-pool-configured", "the-tep-pool-for-the-node-is-not-found.-navigate-to-fabric->-inventory->-pod-fabric-setup-policy-to-address-the-issue.", 8)
    prop._addConstant("node-role-mismatch", "there-is-mismatch-in-actual-and-config-noderole-for-a-hybricmode-switch", 128)
    prop._addConstant("none", "none", 0)
    prop._addConstant("rssupphw-not-found", "switch-is-not-supported-because-compatrssupphw-mo-not-found-for-this-switch-model", 2048)
    prop._addConstant("switchhw-not-found", "switch-is-not-supported-because-compatswitchhw-mo-not-found-for-this-switch-model", 1024)
    prop._addConstant("unregistered-switch", "make-sure-to-register-the-switch-using-fabricnodeidentp", 32)
    meta.props.add("configIssues", prop)

    prop = PropMeta("str", "configNodeRole", "configNodeRole", 25189, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("leaf", "leaf", 2)
    prop._addConstant("spine", "spine", 3)
    prop._addConstant("unspecified", "unknown", 0)
    meta.props.add("configNodeRole", prop)

    prop = PropMeta("str", "decomissioned", "decomissioned", 1161, PropCategory.REGULAR)
    prop.label = "Decomissioned"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("decomissioned", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extPoolId", "extPoolId", 34422, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("extPoolId", prop)

    prop = PropMeta("str", "fabricId", "fabricId", 1154, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("fabricId", prop)

    prop = PropMeta("str", "fwVer", "fwVer", 1159, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("fwVer", prop)

    prop = PropMeta("str", "hwAddr", "hwAddr", 1152, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("hwAddr", prop)

    prop = PropMeta("str", "hybridMode", "hybridMode", 62346, PropCategory.REGULAR)
    prop.label = "Dual Mode Capable Switch"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("hybridMode", prop)

    prop = PropMeta("str", "id", "id", 1151, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 512)]
    meta.props.add("id", prop)

    prop = PropMeta("str", "ip", "ip", 1153, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "model", "model", 1160, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("model", prop)

    prop = PropMeta("str", "name", "name", 5577, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "nodeId", "nodeId", 1156, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 16000)]
    prop.defaultValue = 0
    prop.defaultValueStr = "0"
    meta.props.add("nodeId", prop)

    prop = PropMeta("str", "nodeRole", "nodeRole", 1157, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unsupported"
    prop._addConstant("controller", "controller", 1)
    prop._addConstant("leaf", "leaf", 2)
    prop._addConstant("protection-chain", "protection-chain", 6)
    prop._addConstant("spine", "spine", 3)
    prop._addConstant("unsupported", "unknown", 0)
    prop._addConstant("vip", "vip", 5)
    prop._addConstant("vleaf", "vleaf", 4)
    meta.props.add("nodeRole", prop)

    prop = PropMeta("str", "nodeType", "nodeType", 34421, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("remote-leaf-wan", "remote-leaf-wan", 1)
    prop._addConstant("tier-2-leaf", "tier-2-leaf", 3)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("virtual", "virtual", 2)
    meta.props.add("nodeType", prop)

    prop = PropMeta("str", "poapClient", "poapClient", 64350, PropCategory.REGULAR)
    prop.label = "Poap"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("poapClient", prop)

    prop = PropMeta("str", "poapOperSt", "poapOperSt", 65523, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("completed", "completed", 2)
    prop._addConstant("failed", "failed", 3)
    prop._addConstant("inprogress", "in-progress", 1)
    prop._addConstant("notsupported", "not-supported", 4)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("poapOperSt", prop)

    prop = PropMeta("str", "poapSrcIp", "poapSrcIp", 65630, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("poapSrcIp", prop)

    prop = PropMeta("str", "podId", "podId", 1155, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 254)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("podId", prop)

    prop = PropMeta("str", "relayIp", "relayIp", 21382, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("relayIp", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "runningVer", "runningVer", 21383, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("runningVer", prop)

    prop = PropMeta("str", "spineLevel", "spineLevel", 1158, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("spineLevel", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "supported", "supported", 1162, PropCategory.REGULAR)
    prop.label = "Supported Model"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("supported", prop)

    meta.namingProps.append(getattr(meta.props, "id"))
    getattr(meta.props, "id").needDelimiter = True

    def __init__(self, parentMoOrDn, id, markDirty=True, **creationProps):
        namingVals = [id]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
