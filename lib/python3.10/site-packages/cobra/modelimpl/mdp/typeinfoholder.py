# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class TypeInfoHolder(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.mdp.TypeInfoHolder")

    meta.moClassName = "mdpTypeInfoHolder"
    meta.rnFormat = "ty-%(type)s"
    meta.category = MoCategory.REGULAR
    meta.label = "Type Stats Holder"
    meta.writeAccessMask = 0x601
    meta.readAccessMask = 0x601
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.mdp.DestGrpInfoHolder")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg15min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1d")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1h")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1mo")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1qtr")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1w")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAg1year")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist15min")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1d")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1h")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1mo")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1qtr")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1w")
    meta.childClasses.add("cobra.model.tunnel.EgrTepCntrsAgHist1year")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg15min")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1d")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1h")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1mo")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1qtr")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1w")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAg1year")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist15min")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1d")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1h")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1mo")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1qtr")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1w")
    meta.childClasses.add("cobra.model.tunnel.IngrTepCntrsAgHist1year")

    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist15min", "HDtunnelIngrTepCntrsAg15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1year", "HDtunnelIngrTepCntrsAg1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist15min", "HDtunnelEgrTepCntrsAg15min-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1year", "HDtunnelEgrTepCntrsAg1year-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg15min", "CDtunnelIngrTepCntrsAg15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1year", "CDtunnelIngrTepCntrsAg1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1qtr", "HDtunnelIngrTepCntrsAg1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg15min", "CDtunnelEgrTepCntrsAg15min"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1year", "CDtunnelEgrTepCntrsAg1year"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1qtr", "HDtunnelEgrTepCntrsAg1qtr-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1qtr", "CDtunnelIngrTepCntrsAg1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1mo", "HDtunnelIngrTepCntrsAg1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1qtr", "CDtunnelEgrTepCntrsAg1qtr"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1mo", "HDtunnelEgrTepCntrsAg1mo-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1mo", "CDtunnelIngrTepCntrsAg1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1d", "HDtunnelIngrTepCntrsAg1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1h", "HDtunnelIngrTepCntrsAg1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAgHist1w", "HDtunnelIngrTepCntrsAg1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1mo", "CDtunnelEgrTepCntrsAg1mo"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1d", "HDtunnelEgrTepCntrsAg1d-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1h", "HDtunnelEgrTepCntrsAg1h-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAgHist1w", "HDtunnelEgrTepCntrsAg1w-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1d", "CDtunnelIngrTepCntrsAg1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1h", "CDtunnelIngrTepCntrsAg1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.IngrTepCntrsAg1w", "CDtunnelIngrTepCntrsAg1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1d", "CDtunnelEgrTepCntrsAg1d"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1h", "CDtunnelEgrTepCntrsAg1h"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tunnel.EgrTepCntrsAg1w", "CDtunnelEgrTepCntrsAg1w"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.mdp.DestGrpInfoHolder", "dg-"))

    meta.parentClasses.add("cobra.model.mdp.LeafP")
    meta.parentClasses.add("cobra.model.mdp.ProviderP")

    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.pol.Instr")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.rnPrefixes = [
        ('ty-', True),
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "descr", "descr", 5581, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 59178, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 4991, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "type", "type", 59053, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.defaultValue = 1
    prop.defaultValueStr = "physical"
    prop._addConstant("dci-mcast-hrep", "remote-site-dci-mcast", 512)
    prop._addConstant("dci-ucast", "remote-pod-dci-unicast", 256)
    prop._addConstant("fabric-ext", "fabric-external", 32)
    prop._addConstant("ivleaf", "ivleaf", 1048576)
    prop._addConstant("learn-disabled", "learn-disabled", 1024)
    prop._addConstant("multidomain-anycast-v4-tep", "local-loopback-tunnel-allocated-from-rtep-pool-created-on-campus-bls", 33554432)
    prop._addConstant("multidomain-anycast-v6-tep", "local-loopback-tunnel-allocated-from-rtep-pool-created-on-campus-bls", 67108864)
    prop._addConstant("multidomain-ext-tep", "local-loopback-tunenl-allocated-from-pod-tep-pool-to-support-sda-integration", 4194304)
    prop._addConstant("multidomain-int-tep", "local-loopback-tunnel-allocated-from-pod-tep-pool-to-support-sda-integration", 8388608)
    prop._addConstant("multidomain-remote-dp-tep", "sda-remote-tunnels-dynamically-created-on-campus-bls", 16777216)
    prop._addConstant("non-fabric-golf", "non-fabric-golf", 4096)
    prop._addConstant("non-fabric-untrusted", "non-fabric-untrusted-node", 64)
    prop._addConstant("physical", "physical-ep", 1)
    prop._addConstant("proxy-acast-mac", "proxy-anycast-mac-ep", 16)
    prop._addConstant("proxy-acast-v4", "proxy-anycast-ipv4-ep", 4)
    prop._addConstant("proxy-acast-v6", "proxy-anycast-ipv6-ep", 8)
    prop._addConstant("rl-direct", "rl-direct-switching", 262144)
    prop._addConstant("rl-direct-pod", "rl-direct-switching-interpod", 524288)
    prop._addConstant("rl-direct-rt-ptep", "direct-tunnel-from-rl-to-ll-for-copy-service-and-bgp", 134217728)
    prop._addConstant("rl-mcast-hrep", "remote-leaf-multicast", 16384)
    prop._addConstant("rl-routable", "rl-routable", 2097152)
    prop._addConstant("rl-ss", "remote-leaf-shared-service", 2048)
    prop._addConstant("rl-ucast", "remote-leaf-unicast", 8192)
    prop._addConstant("rl-vpc", "remote-leaf-vpc", 32768)
    prop._addConstant("underlay-mcast", "underlay-multicast", 128)
    prop._addConstant("virtual", "virtual-ep", 2)
    prop._addConstant("vpod-mcast-hrep", "vpod-leaf-multicast", 131072)
    prop._addConstant("vpod-ucast", "vpod-leaf-unicast", 65536)
    meta.props.add("type", prop)

    meta.namingProps.append(getattr(meta.props, "type"))

    def __init__(self, parentMoOrDn, type, markDirty=True, **creationProps):
        namingVals = [type]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
