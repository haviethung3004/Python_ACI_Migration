# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Oper(Mo):
    meta = ClassMeta("cobra.model.hcloud.Oper")

    meta.isAbstract = True
    meta.moClassName = "hcloudOper"


    meta.moClassName = "hcloudOper"
    meta.rnFormat = ""
    meta.category = MoCategory.REGULAR
    meta.label = "None"
    meta.writeAccessMask = 0x1
    meta.readAccessMask = 0x1
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.generics.RuleSubject")
    meta.parentClasses.add("cobra.model.hcloud.FailedOper")

    meta.superClasses.add("cobra.model.hcloud.ACloudBase")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")

    meta.concreteSubClasses.add("cobra.model.hcloud.FailedStatDiagOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.InstanceOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxPeerRoutingOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.ListenerCertificateOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.DiscVendorCInstOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.DiskOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsVpnConnToCgwOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IngressRuleContractOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.BulkEgressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CidrOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SgIngressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.InventoryTaskError")
    meta.concreteSubClasses.add("cobra.model.hcloud.S3Error")
    meta.concreteSubClasses.add("cobra.model.hcloud.AwsVpnTunnelInfo")
    meta.concreteSubClasses.add("cobra.model.hcloud.SharedResourceToHubCtxAcceptOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RegionOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IgwOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.PrivateEndpointOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EvRGDeployError")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsSubnetToRTOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IngressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.AvailZoneOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.VendorInstOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxPeeringOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SGRuleGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtError")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxPeerOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.InterHubCtxPeerOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.GenericError")
    meta.concreteSubClasses.add("cobra.model.hcloud.AzureInventoryTaskError")
    meta.concreteSubClasses.add("cobra.model.hcloud.VpnConnectionToRouteTableOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.VwanResourceGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SgEgressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsIgwToRTOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.TargetOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.VgwOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.VpnConnectionOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.DiscEpOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.GarbageCollectorError")
    meta.concreteSubClasses.add("cobra.model.hcloud.CloneFromRouteTableOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IpIngressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EgressRuleContractOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.ConfigTaskError")
    meta.concreteSubClasses.add("cobra.model.hcloud.ProvAcctOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EvAppDeployError")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxConnectToRouteTableOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.ListenerOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.AvailabilitySetOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EndPointOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CgwOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SqsError")
    meta.concreteSubClasses.add("cobra.model.hcloud.SubnetOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SecurityGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.ListenerRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.VrfOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EventTaskError")
    meta.concreteSubClasses.add("cobra.model.hcloud.NativeLBOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.BulkIngressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.HubCtxBgpPeerOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsEpToSecurityGroupError")
    meta.concreteSubClasses.add("cobra.model.hcloud.ListenerRulePriorityOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.UserRouteTableEntryOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.GcpFlowLogOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EgressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CertificateOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RouteTableEntryOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.PeerGwOper")
    meta.concreteSubClasses.add("cobra.model.hcextnw.TunnIfOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.HubCtxOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EvNsDeployError")
    meta.concreteSubClasses.add("cobra.model.hcloud.CweError")
    meta.concreteSubClasses.add("cobra.model.hcloud.SubnetNsgAttachOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.AwsTgwConnectTunnelInfo")
    meta.concreteSubClasses.add("cobra.model.hcloud.ZoneMappingOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.EvAlertDeployError")
    meta.concreteSubClasses.add("cobra.model.hcloud.TargetGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IpEgressRuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.IpOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.ResourceGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CsrSummaryOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsEpToSecurityGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SharedResourceToHubCtxCreateOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RouteTableOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RsTgToEndPointOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.StorageAccountOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.RuleOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxProfileOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.LogGrpOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.AccountOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.SelectedEPOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CsrUpgradeOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.AzEventTaskError")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxPeerToRouteTableOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.HubCtxGroupOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.CtxConnectOper")
    meta.concreteSubClasses.add("cobra.model.hcloud.FlowLogOper")

    meta.rnPrefixes = [
    ]

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cloudProviderId", "cloudProviderId", 50281, PropCategory.REGULAR)
    prop.label = "Resource ID in Cloud Provider"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cloudProviderId", prop)

    prop = PropMeta("str", "delegateDn", "delegateDn", 53376, PropCategory.REGULAR)
    prop.label = "DN of logical object to which delegate faults"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("delegateDn", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "name", "name", 50278, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 50279, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operState", "operState", 50282, PropCategory.REGULAR)
    prop.label = "Operational state of cloud resource"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "pending"
    prop._addConstant("available", "available", 8)
    prop._addConstant("configured", "configured", 6)
    prop._addConstant("deleting", "deleting", 15)
    prop._addConstant("down", "down", 11)
    prop._addConstant("failed", "failed", 7)
    prop._addConstant("in-use", "in-use", 9)
    prop._addConstant("pending", "pending", 0)
    prop._addConstant("pending-accept", "pending-accept", 13)
    prop._addConstant("pending-driver", "pending-driver", 16)
    prop._addConstant("rebooting", "rebooting", 10)
    prop._addConstant("requested", "requested", 12)
    prop._addConstant("running", "running", 1)
    prop._addConstant("shutting-down", "shutting-down", 2)
    prop._addConstant("stopped", "stopped", 5)
    prop._addConstant("stopping", "stopping", 4)
    prop._addConstant("succeeded", "succeeded", 14)
    prop._addConstant("terminated", "terminated", 3)
    prop._addConstant("updating", "updating", 17)
    meta.props.add("operState", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stateReason", "stateReason", 50283, PropCategory.REGULAR)
    prop.label = "String explaining reason of resource's state"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("stateReason", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
