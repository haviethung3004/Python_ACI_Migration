# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class AwsVpnTunnelInfo(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.hcloud.AwsVpnTunnelInfo")

    meta.moClassName = "hcloudAwsVpnTunnelInfo"
    meta.rnFormat = "tunnelinfo-%(tunnelID)s"
    meta.category = MoCategory.REGULAR
    meta.label = "VGWs VPN Connection Tunnel Info"
    meta.writeAccessMask = 0x5
    meta.readAccessMask = 0x5
    meta.isDomainable = False
    meta.isReadOnly = True
    meta.isConfigurable = False
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.fault.Delegate")

    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.generics.RuleSubject")
    meta.parentClasses.add("cobra.model.hcloud.FailedOper")
    meta.parentClasses.add("cobra.model.hcloud.RsVpnConnToCgw")

    meta.superClasses.add("cobra.model.hcloud.ACloudBase")
    meta.superClasses.add("cobra.model.hcloud.Oper")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.hcloud.AwsTunnelInfo")

    meta.rnPrefixes = [
        ('tunnelinfo-', True),
    ]

    prop = PropMeta("str", "asn", "asn", 63534, PropCategory.REGULAR)
    prop.label = "CSR BGP ASN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("asn", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "cloudProviderId", "cloudProviderId", 50281, PropCategory.REGULAR)
    prop.label = "Resource ID in Cloud Provider"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("cloudProviderId", prop)

    prop = PropMeta("str", "delegateDn", "delegateDn", 53376, PropCategory.REGULAR)
    prop.label = "DN of logical object to which delegate faults"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("delegateDn", prop)

    prop = PropMeta("str", "destInnerAddress", "destInnerAddress", 63532, PropCategory.REGULAR)
    prop.label = "VGW/TGW Tunnel Inner IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("destInnerAddress", prop)

    prop = PropMeta("str", "destOuterAddress", "destOuterAddress", 63533, PropCategory.REGULAR)
    prop.label = "VGW/TGW Tunnel Outer Public IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("destOuterAddress", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dpdInterval", "dpdInterval", 50425, PropCategory.REGULAR)
    prop.label = "IPsec DPD Interval"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dpdInterval", prop)

    prop = PropMeta("str", "dpdRetries", "dpdRetries", 50426, PropCategory.REGULAR)
    prop.label = "IPsec DPD Retries"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("dpdRetries", prop)

    prop = PropMeta("str", "fragmentationBeforeEncryption", "fragmentationBeforeEncryption", 50423, PropCategory.REGULAR)
    prop.label = "IPsec Fragmentation Before Encryption"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("fragmentationBeforeEncryption", prop)

    prop = PropMeta("str", "holdTime", "holdTime", 63537, PropCategory.REGULAR)
    prop.label = "CSR BGP Hold Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("holdTime", prop)

    prop = PropMeta("str", "ikeAuthenticationProtocol", "ikeAuthenticationProtocol", 50410, PropCategory.REGULAR)
    prop.label = "IKE Authentication Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeAuthenticationProtocol", prop)

    prop = PropMeta("str", "ikeEncryptionProtocol", "ikeEncryptionProtocol", 50411, PropCategory.REGULAR)
    prop.label = "IKE Encryption Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeEncryptionProtocol", prop)

    prop = PropMeta("str", "ikeForwardSecrecy", "ikeForwardSecrecy", 50413, PropCategory.REGULAR)
    prop.label = "IKE Perfect Forward Secrecy"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeForwardSecrecy", prop)

    prop = PropMeta("str", "ikeLifetime", "ikeLifetime", 50412, PropCategory.REGULAR)
    prop.label = "IKE Lifetime"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(60, 86400)]
    prop.defaultValue = 28000
    prop.defaultValueStr = "28000"
    meta.props.add("ikeLifetime", prop)

    prop = PropMeta("str", "ikeMode", "ikeMode", 50414, PropCategory.REGULAR)
    prop.label = "IKE mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ikeMode", prop)

    prop = PropMeta("str", "ikeVersion", "ikeVersion", 54953, PropCategory.REGULAR)
    prop.label = "IKE version to use"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "ikev1"
    prop._addConstant("ikev1", "use-isakmp-version-1", 0)
    prop._addConstant("ikev2", "use-isakmp-version-2", 1)
    meta.props.add("ikeVersion", prop)

    prop = PropMeta("str", "innerAddress", "innerAddress", 63530, PropCategory.REGULAR)
    prop.label = "CSR Tunnel Inner IP Address and Mask"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("innerAddress", prop)

    prop = PropMeta("str", "ipsecAuthenticationProtocol", "ipsecAuthenticationProtocol", 50417, PropCategory.REGULAR)
    prop.label = "IPsec Authentication Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecAuthenticationProtocol", prop)

    prop = PropMeta("str", "ipsecClearDFBit", "ipsecClearDFBit", 50422, PropCategory.REGULAR)
    prop.label = "IPsec DF Bit Clear"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("ipsecClearDFBit", prop)

    prop = PropMeta("str", "ipsecEncryptionProtocol", "ipsecEncryptionProtocol", 50418, PropCategory.REGULAR)
    prop.label = "IPsec Encryption Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecEncryptionProtocol", prop)

    prop = PropMeta("str", "ipsecForwardSecrecy", "ipsecForwardSecrecy", 50420, PropCategory.REGULAR)
    prop.label = "IPsec Perfect Forward Secrecy"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecForwardSecrecy", prop)

    prop = PropMeta("str", "ipsecLifetime", "ipsecLifetime", 50419, PropCategory.REGULAR)
    prop.label = "IPsec Lifetime"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("ipsecLifetime", prop)

    prop = PropMeta("str", "ipsecMode", "ipsecMode", 50421, PropCategory.REGULAR)
    prop.label = "IPsec Mode"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecMode", prop)

    prop = PropMeta("str", "ipsecProtocol", "ipsecProtocol", 50416, PropCategory.REGULAR)
    prop.label = "IPsec Protocol"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("ipsecProtocol", prop)

    prop = PropMeta("str", "isReady", "isReady", 63539, PropCategory.REGULAR)
    prop.label = "Is the AwsTunnelInfo mo ready"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("isReady", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "name", "name", 50278, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 50279, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "operState", "operState", 50282, PropCategory.REGULAR)
    prop.label = "Operational state of cloud resource"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "pending"
    prop._addConstant("available", "available", 8)
    prop._addConstant("configured", "configured", 6)
    prop._addConstant("deleting", "deleting", 15)
    prop._addConstant("down", "down", 11)
    prop._addConstant("failed", "failed", 7)
    prop._addConstant("in-use", "in-use", 9)
    prop._addConstant("pending", "pending", 0)
    prop._addConstant("pending-accept", "pending-accept", 13)
    prop._addConstant("pending-driver", "pending-driver", 16)
    prop._addConstant("rebooting", "rebooting", 10)
    prop._addConstant("requested", "requested", 12)
    prop._addConstant("running", "running", 1)
    prop._addConstant("shutting-down", "shutting-down", 2)
    prop._addConstant("stopped", "stopped", 5)
    prop._addConstant("stopping", "stopping", 4)
    prop._addConstant("succeeded", "succeeded", 14)
    prop._addConstant("terminated", "terminated", 3)
    prop._addConstant("updating", "updating", 17)
    meta.props.add("operState", prop)

    prop = PropMeta("str", "outerAddress", "outerAddress", 63531, PropCategory.REGULAR)
    prop.label = "CSR Tunnel Outer Public IP Address"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("outerAddress", prop)

    prop = PropMeta("str", "preSharedKey", "preSharedKey", 50415, PropCategory.REGULAR)
    prop.label = "IKE PreShared Key"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("preSharedKey", prop)

    prop = PropMeta("str", "remoteAsn", "remoteAsn", 63535, PropCategory.REGULAR)
    prop.label = "VGW/TGW BGP ASN"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 4294967295)]
    meta.props.add("remoteAsn", prop)

    prop = PropMeta("str", "remoteHoldTime", "remoteHoldTime", 63538, PropCategory.REGULAR)
    prop.label = "VGW/TGW BGP Hold Time"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("remoteHoldTime", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "stateReason", "stateReason", 50283, PropCategory.REGULAR)
    prop.label = "String explaining reason of resource's state"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("stateReason", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tcpMSS", "tcpMSS", 50424, PropCategory.REGULAR)
    prop.label = "IPsec TCP MSS"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("tcpMSS", prop)

    prop = PropMeta("str", "ttl", "ttl", 63536, PropCategory.REGULAR)
    prop.label = "eBGP multihop ttl"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "tunnelID", "tunnelID", 52165, PropCategory.REGULAR)
    prop.label = "Tunnel ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("tunnelID", prop)

    meta.namingProps.append(getattr(meta.props, "tunnelID"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToHcloudAwsVpnTunnelInfo", "From hcloudVgw to tunnels", "cobra.model.hcloud.AwsVpnTunnelInfo"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToCloudCtxProfile", "From hcloudVgw to cloudCtxProfile", "cobra.model.cloud.CtxProfile"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("HcloudVgwToFvCtx", "From hcloudVgw to fvCtx", "cobra.model.fv.Ctx"))

    def __init__(self, parentMoOrDn, tunnelID, markDirty=True, **creationProps):
        namingVals = [tunnelID]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
