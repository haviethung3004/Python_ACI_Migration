# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class OauthProvider(Mo):
    """
    Mo doc not defined in techpub!!!

    """

    meta = ClassMeta("cobra.model.aaa.OauthProvider")

    meta.moClassName = "aaaOauthProvider"
    meta.rnFormat = "oauthprovider-%(name)s"
    meta.category = MoCategory.REGULAR
    meta.label = "OAuth 2 Provider"
    meta.writeAccessMask = 0x3
    meta.readAccessMask = 0x3
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.aaa.RsProvToEpp")
    meta.childClasses.add("cobra.model.aaa.RsSecProvToEpg")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Delegate")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RsSecProvToEpg", "rsSecProvToEpg"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RsProvToEpp", "rsProvToEpp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Delegate", "fd-"))

    meta.parentClasses.add("cobra.model.aaa.OauthEp")

    meta.superClasses.add("cobra.model.pol.Def")
    meta.superClasses.add("cobra.model.pol.Obj")
    meta.superClasses.add("cobra.model.naming.NamedObject")
    meta.superClasses.add("cobra.model.aaa.Definition")
    meta.superClasses.add("cobra.model.aaa.AProvider")

    meta.rnPrefixes = [
        ('oauthprovider-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 64546, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "authzEndpoint", "authzEndpoint", 64533, PropCategory.REGULAR)
    prop.label = "Authorization Endpoint URL of the IdP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 1000)]
    meta.props.add("authzEndpoint", prop)

    prop = PropMeta("str", "baseUrl", "baseUrl", 65810, PropCategory.REGULAR)
    prop.label = "Issuer URL"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("baseUrl", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "clientId", "clientId", 64535, PropCategory.REGULAR)
    prop.label = "Client ID"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 500)]
    meta.props.add("clientId", prop)

    prop = PropMeta("str", "descr", "descr", 5579, PropCategory.REGULAR)
    prop.label = "Description"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("descr", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "epgDn", "epgDn", 1376, PropCategory.REGULAR)
    prop.label = "Reachability EpG"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("epgDn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 64547, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "guiBannerMessage", "guiBannerMessage", 64538, PropCategory.REGULAR)
    prop.label = "Gui Redirect Banner Message"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("guiBannerMessage", prop)

    prop = PropMeta("str", "httpsProxy", "httpsProxy", 64537, PropCategory.REGULAR)
    prop.label = "Https Proxy to reach Authz Server e.g. https://proxy.foo.com:8080/"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 256)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("httpsProxy", prop)

    prop = PropMeta("str", "jwksEndpoint", "jwksEndpoint", 65811, PropCategory.REGULAR)
    prop.label = "JWKS Endpoint URL of the IdP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("jwksEndpoint", prop)

    prop = PropMeta("str", "key", "key", 64566, PropCategory.REGULAR)
    prop.label = "Client Secret"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    prop.range = [(1, 500)]
    meta.props.add("key", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 64543, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "monitorServer", "monitorServer", 65275, PropCategory.REGULAR)
    prop.label = "Periodic Server Monitoring"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "disabled"
    prop._addConstant("disabled", "disabled", 0)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("monitorServer", prop)

    prop = PropMeta("str", "monitoringPassword", "monitoringPassword", 15627, PropCategory.REGULAR)
    prop.label = "Periodic Server Monitoring Password"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isPassword = True
    prop.range = [(0, 32)]
    prop.regex = ['.*']
    meta.props.add("monitoringPassword", prop)

    prop = PropMeta("str", "monitoringUser", "monitoringUser", 15626, PropCategory.REGULAR)
    prop.label = "Periodic Server Monitoring Username"
    prop.isConfig = True
    prop.isAdmin = True
    prop.regex = ['[a-zA-Z0-9][a-zA-Z0-9_.@-]{0,31}']
    prop.defaultValue = "default"
    prop.defaultValueStr = "default"
    meta.props.add("monitoringUser", prop)

    prop = PropMeta("str", "name", "name", 64540, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    prop.range = [(1, 64)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("name", prop)

    prop = PropMeta("str", "nameAlias", "nameAlias", 28417, PropCategory.REGULAR)
    prop.label = "Display Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 63)]
    prop.regex = ['[a-zA-Z0-9_.-]+']
    meta.props.add("nameAlias", prop)

    prop = PropMeta("str", "oidcEnabled", "oidcEnabled", 65812, PropCategory.REGULAR)
    prop.label = "Enable use of OIDC protocol"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("oidcEnabled", prop)

    prop = PropMeta("str", "operState", "operState", 1375, PropCategory.REGULAR)
    prop.label = "Provider Operational State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unknown"
    prop._addConstant("inoperable", "inoperable", 2)
    prop._addConstant("operable", "operable", 1)
    prop._addConstant("unknown", "unknown", 0)
    meta.props.add("operState", prop)

    prop = PropMeta("str", "ownerKey", "ownerKey", 15230, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerKey", prop)

    prop = PropMeta("str", "ownerTag", "ownerTag", 15231, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.regex = ['[a-zA-Z0-9\\!#$%()*,-./:;@ _{|}~?&+]+']
    meta.props.add("ownerTag", prop)

    prop = PropMeta("str", "retries", "retries", 65297, PropCategory.REGULAR)
    prop.label = "Retries"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 5)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("retries", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "scope", "scope", 64567, PropCategory.REGULAR)
    prop.label = "OAuth2 Scope (e.g. openid or some custom scope)"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 500)]
    prop.defaultValue = "openid"
    prop.defaultValueStr = "openid"
    meta.props.add("scope", prop)

    prop = PropMeta("str", "snmpIndex", "snmpIndex", 1385, PropCategory.REGULAR)
    prop.label = "Provider SNMP Index"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("snmpIndex", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "timeout", "timeout", 64532, PropCategory.REGULAR)
    prop.label = "Timeout in Seconds"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(5, 30)]
    prop.defaultValue = 5
    prop.defaultValueStr = "5"
    meta.props.add("timeout", prop)

    prop = PropMeta("str", "tokenEndpoint", "tokenEndpoint", 64534, PropCategory.REGULAR)
    prop.label = "Token Endpoint URL of the IdP"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 1000)]
    meta.props.add("tokenEndpoint", prop)

    prop = PropMeta("str", "tp", "tp", 64539, PropCategory.REGULAR)
    prop.label = "Certificate Authority"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 16)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("tp", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    prop = PropMeta("str", "usernameAttribute", "usernameAttribute", 64559, PropCategory.REGULAR)
    prop.label = "Username Claim (e.g. username, email, sub etc)"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 500)]
    prop.defaultValue = "sub"
    prop.defaultValueStr = "sub"
    meta.props.add("usernameAttribute", prop)

    prop = PropMeta("str", "verifyEnabled", "verifyEnabled", 65813, PropCategory.REGULAR)
    prop.label = "Verify token signature"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("verifyEnabled", prop)

    prop = PropMeta("str", "vrfName", "vrfName", 1378, PropCategory.REGULAR)
    prop.label = "Vrf Name"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 512)]
    meta.props.add("vrfName", prop)

    meta.namingProps.append(getattr(meta.props, "name"))

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Fabric"

    def __init__(self, parentMoOrDn, name, markDirty=True, **creationProps):
        namingVals = [name]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
