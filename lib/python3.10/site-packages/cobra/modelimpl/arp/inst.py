# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class Inst(Mo):
    """
    Represents per-ARP instance information. In the current implementation,  only one instance of ARP is running in the system.

    """

    meta = ClassMeta("cobra.model.arp.Inst")

    meta.moClassName = "arpInst"
    meta.rnFormat = "inst"
    meta.category = MoCategory.REGULAR
    meta.label = "ARP Instance"
    meta.writeAccessMask = 0xd049
    meta.readAccessMask = 0xd049
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.arp.Dom")
    meta.childClasses.add("cobra.model.arp.EventLogs")
    meta.childClasses.add("cobra.model.arp.Ipv4Throttle")
    meta.childClasses.add("cobra.model.arp.Vpc")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.arp.Ipv4Throttle", "ipgleanthrottle"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.EventLogs", "evtLogs-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.Dom", "dom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.Vpc", "vpc"))

    meta.parentClasses.add("cobra.model.arp.Entity")

    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.GEp")
    meta.superClasses.add("cobra.model.nw.CpInst")
    meta.superClasses.add("cobra.model.nw.ProtInst")
    meta.superClasses.add("cobra.model.l3.ProtInst")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('inst', False),
    ]

    prop = PropMeta("str", "adjacencyCfgFailedBmp", "adjacencyCfgFailedBmp", 69459, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("arp:InstadjLoggingLevel_failed_flag", None, 16)
    prop._addConstant("arp:InstadminSt_failed_flag", None, 2)
    prop._addConstant("arp:InstallowStaticArpOutsideSubnet_failed_flag", None, 256)
    prop._addConstant("arp:Instannotation_failed_flag", None, 512)
    prop._addConstant("arp:InstarpUnnumSviSwReplication_failed_flag", None, 1024)
    prop._addConstant("arp:InstcacheLimit_failed_flag", None, 2048)
    prop._addConstant("arp:InstcacheSyslogRate_failed_flag", None, 4096)
    prop._addConstant("arp:Instctrl_failed_flag", None, 4)
    prop._addConstant("arp:Instevpn_timeout_failed_flag", None, 16384)
    prop._addConstant("arp:InstextMngdBy_failed_flag", None, 32768)
    prop._addConstant("arp:InstipAdjRouteDistance_failed_flag", None, 65536)
    prop._addConstant("arp:InstipArpCos_failed_flag", None, 131072)
    prop._addConstant("arp:InstlcOwn_failed_flag", None, 9223372036854775808)
    prop._addConstant("arp:InstloggingLevel_failed_flag", None, 262144)
    prop._addConstant("arp:InstmodTs_failed_flag", None, 1152921504606846976)
    prop._addConstant("arp:InstmonPolDn_failed_flag", None, 524288)
    prop._addConstant("arp:Instname_failed_flag", None, 1)
    prop._addConstant("arp:InstoffListTimeout_failed_flag", None, 1048576)
    prop._addConstant("arp:InstrarpFabricFwdingRate_failed_flag", None, 4194304)
    prop._addConstant("arp:InstrarpFabricFwding_failed_flag", None, 2097152)
    prop._addConstant("arp:Instsuppression_timeout_failed_flag", None, 8388608)
    prop._addConstant("arp:Insttimeout_failed_flag", None, 16777216)
    prop._addConstant("arp:Instuid_failed_flag", None, 4611686018427387904)
    prop._addConstant("arp:Instuserdom_failed_flag", None, 2305843009213693952)
    meta.props.add("adjacencyCfgFailedBmp", prop)

    prop = PropMeta("str", "adjacencyCfgFailedTs", "adjacencyCfgFailedTs", 69461, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("adjacencyCfgFailedTs", prop)

    prop = PropMeta("str", "adjacencyCfgState", "adjacencyCfgState", 69460, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("adjacencyCfgState", prop)

    prop = PropMeta("str", "adminSt", "adminSt", 3679, PropCategory.REGULAR)
    prop.label = "Admin State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "enabled"
    prop._addConstant("disabled", "disabled", 2)
    prop._addConstant("enabled", "enabled", 1)
    meta.props.add("adminSt", prop)

    prop = PropMeta("str", "annotation", "annotation", 69441, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "ctrl", "ctrl", 3680, PropCategory.REGULAR)
    prop.label = "Controls"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("stateful-ha", "stateful-ha", 1)
    meta.props.add("ctrl", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 69442, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14433, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 3678, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operErr", "operErr", 69426, PropCategory.REGULAR)
    prop.label = "Operational Errors Qualifier"
    prop.isOper = True
    prop._addConstant("feature-unsupported", "feature-unsupported", 64)
    prop._addConstant("init-err", "initialization-error", 1)
    prop._addConstant("int-err", "internal-error", 8)
    prop._addConstant("ipc-err", "ipc-error", 4)
    prop._addConstant("mem-err", "memory-error", 2)
    prop._addConstant("proto-err", "protocol-error", 32)
    prop._addConstant("sock-err", "socket-error", 16)
    meta.props.add("operErr", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
