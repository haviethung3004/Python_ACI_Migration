# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class StAdjEp(Mo):
    """
    The ARP static adjacency endpoint, which is the endpoint object that contains information regarding statically configured endpoints. This is a statically configured endpoint corresponding to an interface.

    """

    meta = ClassMeta("cobra.model.arp.StAdjEp")

    meta.moClassName = "arpStAdjEp"
    meta.rnFormat = "sadj-[%(ip)s]"
    meta.category = MoCategory.REGULAR
    meta.label = "ARP Static Adjacency"
    meta.writeAccessMask = 0xd049
    meta.readAccessMask = 0xd049
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = False
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.arp.RtCtrlrAdjEpToStAdjEp")
    meta.childClasses.add("cobra.model.arp.RtEpDefRefToStAdjEp")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.arp.RtEpDefRefToStAdjEp", "rtfvEpDefRefToStAdjEp-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.arp.RtCtrlrAdjEpToStAdjEp", "rtCtrlrAdjEpToStAdjEp"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.arp.If")

    meta.superClasses.add("cobra.model.nw.ConnEp")
    meta.superClasses.add("cobra.model.l3.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.AdjEp")
    meta.superClasses.add("cobra.model.nw.Ep")
    meta.superClasses.add("cobra.model.arp.AAdjEp")
    meta.superClasses.add("cobra.model.nw.Conn")
    meta.superClasses.add("cobra.model.nw.ProtAdjEp")
    meta.superClasses.add("cobra.model.nw.Item")

    meta.rnPrefixes = [
        ('sadj-', True),
    ]

    prop = PropMeta("str", "annotation", "annotation", 69435, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "arpCfgFailedBmp", "arpCfgFailedBmp", 69453, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    prop._addConstant("arp:StAdjEpannotation_failed_flag", None, 32)
    prop._addConstant("arp:StAdjEpencap_failed_flag", None, 512)
    prop._addConstant("arp:StAdjEpextMngdBy_failed_flag", None, 1024)
    prop._addConstant("arp:StAdjEpfabEncap_failed_flag", None, 2048)
    prop._addConstant("arp:StAdjEpip_failed_flag", None, 2)
    prop._addConstant("arp:StAdjEplcOwn_failed_flag", None, 9223372036854775808)
    prop._addConstant("arp:StAdjEpmac_failed_flag", None, 4)
    prop._addConstant("arp:StAdjEpmodTs_failed_flag", None, 1152921504606846976)
    prop._addConstant("arp:StAdjEpmonPolDn_failed_flag", None, 4096)
    prop._addConstant("arp:StAdjEpname_failed_flag", None, 1)
    prop._addConstant("arp:StAdjEpuid_failed_flag", None, 4611686018427387904)
    prop._addConstant("arp:StAdjEpupMonotonicTS_failed_flag", None, 8)
    prop._addConstant("arp:StAdjEpupTS_failed_flag", None, 16)
    prop._addConstant("arp:StAdjEpuserdom_failed_flag", None, 2305843009213693952)
    meta.props.add("arpCfgFailedBmp", prop)

    prop = PropMeta("str", "arpCfgFailedTs", "arpCfgFailedTs", 69455, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("arpCfgFailedTs", prop)

    prop = PropMeta("str", "arpCfgState", "arpCfgState", 69454, PropCategory.REGULAR)
    prop.label = "None"
    prop.isOper = True
    meta.props.add("arpCfgState", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "encap", "encap", 69855, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("encap", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 69436, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "fabEncap", "fabEncap", 70866, PropCategory.REGULAR)
    prop.label = "Fabric Encapsulation"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("fabEncap", prop)

    prop = PropMeta("str", "ip", "ip", 5872, PropCategory.REGULAR)
    prop.label = "Address"
    prop.isConfig = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    prop.isNaming = True
    meta.props.add("ip", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "mac", "mac", 2275, PropCategory.REGULAR)
    prop.label = "MAC"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unspecified"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("mac", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 14430, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "name", "name", 16432, PropCategory.REGULAR)
    prop.label = "Name"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 128)]
    meta.props.add("name", prop)

    prop = PropMeta("str", "operSt", "operSt", 2277, PropCategory.REGULAR)
    prop.label = "Operational State"
    prop.isOper = True
    prop.defaultValue = 0
    prop.defaultValueStr = "down"
    prop._addConstant("down", "down", 0)
    prop._addConstant("unspecified", "unspecified", 10)
    prop._addConstant("up", "incomplete", 1)
    meta.props.add("operSt", prop)

    prop = PropMeta("str", "operStQual", "operStQual", 2278, PropCategory.REGULAR)
    prop.label = "Operational State Qualifier"
    prop.isOper = True
    prop.defaultValue = 7
    prop.defaultValueStr = "up"
    prop._addConstant("if-down", "interface-down", 6)
    prop._addConstant("invalid-clidata", "invalid-cli-data", 9)
    prop._addConstant("invalid-if", "invalid-interface", 8)
    prop._addConstant("invalid-ip", "invalid-ip", 3)
    prop._addConstant("invalid-mac", "invalid-mac", 2)
    prop._addConstant("invalid-vrf", "invalid-vrf", 4)
    prop._addConstant("no-memory", "no-memory", 10)
    prop._addConstant("own-mac", "own-mac", 5)
    prop._addConstant("subnet-mismatch", "subnet-mismatch", 1)
    prop._addConstant("unspecified", "unspecified", 0)
    prop._addConstant("up", "up", 7)
    meta.props.add("operStQual", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "upMonotonicTS", "upMonotonicTS", 70072, PropCategory.REGULAR)
    prop.label = "ARP Entry TS in monotonic format"
    prop.isOper = True
    meta.props.add("upMonotonicTS", prop)

    prop = PropMeta("str", "upTS", "upTS", 2276, PropCategory.REGULAR)
    prop.label = "ARP Entry Age"
    prop.isOper = True
    meta.props.add("upTS", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    meta.namingProps.append(getattr(meta.props, "ip"))
    getattr(meta.props, "ip").needDelimiter = True

    def __init__(self, parentMoOrDn, ip, markDirty=True, **creationProps):
        namingVals = [ip]
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
