# coding=UTF-8
# **********************************************************************
# Copyright (c) 2013-2024 Cisco Systems, Inc. All rights reserved
# written by zen warriors, do not modify!
# **********************************************************************


from cobra.mit.meta import ClassMeta
from cobra.mit.meta import StatsClassMeta
from cobra.mit.meta import CounterMeta
from cobra.mit.meta import PropMeta
from cobra.mit.meta import Category
from cobra.mit.meta import SourceRelationMeta
from cobra.mit.meta import NamedSourceRelationMeta
from cobra.mit.meta import TargetRelationMeta
from cobra.mit.meta import DeploymentPathMeta, DeploymentCategory
from cobra.model.category import MoCategory, PropCategory, CounterCategory
from cobra.mit.mo import Mo


# ##################################################
class RsDestApic(Mo):
    """
    

    """

    meta = SourceRelationMeta("cobra.model.span.RsDestApic", "cobra.model.fabric.Node")
    meta.cardinality = SourceRelationMeta.ONE_TO_ONE

    meta.moClassName = "spanRsDestApic"
    meta.rnFormat = "rsdestApic"
    meta.category = MoCategory.RELATIONSHIP_TO_LOCAL
    meta.label = "Relation to SPAN Destination APIC"
    meta.writeAccessMask = 0x9
    meta.readAccessMask = 0x9
    meta.isDomainable = False
    meta.isReadOnly = False
    meta.isConfigurable = True
    meta.isDeletable = True
    meta.isContextRoot = False

    meta.childClasses.add("cobra.model.aaa.RbacAnnotation")
    meta.childClasses.add("cobra.model.fault.Counts")
    meta.childClasses.add("cobra.model.fault.Inst")
    meta.childClasses.add("cobra.model.health.Inst")
    meta.childClasses.add("cobra.model.tag.Annotation")
    meta.childClasses.add("cobra.model.tag.Tag")

    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Annotation", "annotationKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.aaa.RbacAnnotation", "rbacDom-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Counts", "fltCnts"))
    meta.childNamesAndRnPrefix.append(("cobra.model.tag.Tag", "tagKey-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.fault.Inst", "fault-"))
    meta.childNamesAndRnPrefix.append(("cobra.model.health.Inst", "health"))

    meta.parentClasses.add("cobra.model.span.Dest")
    meta.parentClasses.add("cobra.model.span.VDest")
    meta.parentClasses.add("cobra.model.span.VDestDef")

    meta.superClasses.add("cobra.model.reln.To")
    meta.superClasses.add("cobra.model.reln.Inst")

    meta.rnPrefixes = [
        ('rsdestApic', False),
    ]

    prop = PropMeta("str", "analyserIp", "analyserIp", 18494, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("analyserIp", prop)

    prop = PropMeta("str", "annotation", "annotation", 38215, PropCategory.REGULAR)
    prop.label = "Annotation"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 128)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    meta.props.add("annotation", prop)

    prop = PropMeta("str", "childAction", "childAction", 4, PropCategory.CHILD_ACTION)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("deleteAll", "deleteall", 16384)
    prop._addConstant("deleteNonPresent", "deletenonpresent", 8192)
    prop._addConstant("ignore", "ignore", 4096)
    meta.props.add("childAction", prop)

    prop = PropMeta("str", "dn", "dn", 1, PropCategory.DN)
    prop.label = "None"
    prop.isDn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("dn", prop)

    prop = PropMeta("str", "dscp", "dscp", 55920, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(0, 64)]
    prop.defaultValue = 64
    prop.defaultValueStr = "unspecified"
    prop._addConstant("AF11", "af11-low-drop", 10)
    prop._addConstant("AF12", "af12-medium-drop", 12)
    prop._addConstant("AF13", "af13-high-drop", 14)
    prop._addConstant("AF21", "af21-low-drop", 18)
    prop._addConstant("AF22", "af22-medium-drop", 20)
    prop._addConstant("AF23", "af23-high-drop", 22)
    prop._addConstant("AF31", "af31-low-drop", 26)
    prop._addConstant("AF32", "af32-medium-drop", 28)
    prop._addConstant("AF33", "af33-high-drop", 30)
    prop._addConstant("AF41", "af41-low-drop", 34)
    prop._addConstant("AF42", "af42-medium-drop", 36)
    prop._addConstant("AF43", "af43-high-drop", 38)
    prop._addConstant("CS0", "cs0", 0)
    prop._addConstant("CS1", "cs1", 8)
    prop._addConstant("CS2", "cs2", 16)
    prop._addConstant("CS3", "cs3", 24)
    prop._addConstant("CS4", "cs4", 32)
    prop._addConstant("CS5", "cs5", 40)
    prop._addConstant("CS6", "cs6", 48)
    prop._addConstant("CS7", "cs7", 56)
    prop._addConstant("EF", "expedited-forwarding", 46)
    prop._addConstant("VA", "voice-admit", 44)
    prop._addConstant("unspecified", "unspecified", 64)
    meta.props.add("dscp", prop)

    prop = PropMeta("str", "extMngdBy", "extMngdBy", 40354, PropCategory.REGULAR)
    prop.label = "Managed By"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "undefined"
    prop._addConstant("msc", "msc", 1)
    prop._addConstant("undefined", "undefined", 0)
    meta.props.add("extMngdBy", prop)

    prop = PropMeta("str", "flowId", "flowId", 18495, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(1, 1023)]
    prop.defaultValue = 1
    prop.defaultValueStr = "1"
    meta.props.add("flowId", prop)

    prop = PropMeta("str", "forceResolve", "forceResolve", 107, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = True
    prop.defaultValueStr = "yes"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("forceResolve", prop)

    prop = PropMeta("str", "lcOwn", "lcOwn", 9, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "local"
    prop._addConstant("implicit", "implicit", 4)
    prop._addConstant("local", "local", 0)
    prop._addConstant("policy", "policy", 1)
    prop._addConstant("replica", "replica", 2)
    prop._addConstant("resolveOnBehalf", "resolvedonbehalf", 3)
    meta.props.add("lcOwn", prop)

    prop = PropMeta("str", "modTs", "modTs", 7, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "never"
    prop._addConstant("never", "never", 0)
    meta.props.add("modTs", prop)

    prop = PropMeta("str", "mode", "mode", 55921, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "not-visible"
    prop._addConstant("not-visible", "not-visible", 1)
    prop._addConstant("visible", "visible", 0)
    meta.props.add("mode", prop)

    prop = PropMeta("str", "monPolDn", "monPolDn", 18499, PropCategory.REGULAR)
    prop.label = "Monitoring policy"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("monPolDn", prop)

    prop = PropMeta("str", "mtu", "mtu", 55922, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(64, 9216)]
    prop.defaultValue = 1518
    prop.defaultValueStr = "1518"
    meta.props.add("mtu", prop)

    prop = PropMeta("str", "rType", "rType", 106, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("local", "local", 3)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("service", "service", 2)
    meta.props.add("rType", prop)

    prop = PropMeta("str", "rn", "rn", 2, PropCategory.RN)
    prop.label = "None"
    prop.isRn = True
    prop.isImplicit = True
    prop.isAdmin = True
    prop.isCreateOnly = True
    meta.props.add("rn", prop)

    prop = PropMeta("str", "srcIpPrefix", "srcIpPrefix", 18660, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("srcIpPrefix", prop)

    prop = PropMeta("str", "state", "state", 103, PropCategory.REGULAR)
    prop.label = "State"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "unformed"
    prop._addConstant("cardinality-violation", "cardinality-violation", 5)
    prop._addConstant("formed", "formed", 1)
    prop._addConstant("invalid-target", "invalid-target", 4)
    prop._addConstant("missing-target", "missing-target", 2)
    prop._addConstant("unformed", "unformed", 0)
    meta.props.add("state", prop)

    prop = PropMeta("str", "stateQual", "stateQual", 104, PropCategory.REGULAR)
    prop.label = "State Qualifier"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 0
    prop.defaultValueStr = "none"
    prop._addConstant("default-target", "default-target", 2)
    prop._addConstant("mismatch-target", "mismatch-target", 1)
    prop._addConstant("none", "none", 0)
    meta.props.add("stateQual", prop)

    prop = PropMeta("str", "status", "status", 3, PropCategory.STATUS)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop._addConstant("created", "created", 2)
    prop._addConstant("deleted", "deleted", 8)
    prop._addConstant("modified", "modified", 4)
    meta.props.add("status", prop)

    prop = PropMeta("str", "tCl", "tCl", 18497, PropCategory.REGULAR)
    prop.label = "Target-class"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 443
    prop.defaultValueStr = "fabricNode"
    prop._addConstant("fabricNode", None, 443)
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("tCl", prop)

    prop = PropMeta("str", "tDn", "tDn", 18496, PropCategory.REGULAR)
    prop.label = "Target-dn"
    prop.isConfig = True
    prop.isAdmin = True
    meta.props.add("tDn", prop)

    prop = PropMeta("str", "tType", "tType", 105, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = 1
    prop.defaultValueStr = "mo"
    prop._addConstant("all", "all", 2)
    prop._addConstant("mo", "mo", 1)
    prop._addConstant("name", "name", 0)
    meta.props.add("tType", prop)

    prop = PropMeta("str", "ttl", "ttl", 55923, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.range = [(1, 255)]
    prop.defaultValue = 64
    prop.defaultValueStr = "64"
    prop._addConstant("unspecified", "unspecified", 0)
    meta.props.add("ttl", prop)

    prop = PropMeta("str", "uid", "uid", 8, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    meta.props.add("uid", prop)

    prop = PropMeta("str", "userdom", "userdom", 60657, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.range = [(0, 1024)]
    prop.regex = ['[a-zA-Z0-9_.:-]+']
    prop.defaultValue = "all"
    prop.defaultValueStr = "all"
    meta.props.add("userdom", prop)

    prop = PropMeta("str", "ver", "ver", 55924, PropCategory.REGULAR)
    prop.label = "None"
    prop.isConfig = True
    prop.isAdmin = True
    prop.defaultValue = 2
    prop.defaultValueStr = "ver2"
    prop._addConstant("ver1", "version-1", 1)
    prop._addConstant("ver2", "version-2", 2)
    meta.props.add("ver", prop)

    prop = PropMeta("str", "verEnforced", "verEnforced", 55925, PropCategory.REGULAR)
    prop.label = "None"
    prop.isImplicit = True
    prop.isAdmin = True
    prop.defaultValue = False
    prop.defaultValueStr = "no"
    prop._addConstant("no", "no", False)
    prop._addConstant("yes", "yes", True)
    meta.props.add("verEnforced", prop)

    # Deployment Meta
    meta.deploymentQuery = True
    meta.deploymentType = "Ancestor"
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmOrchsProvPlan", "Provider Plans", "cobra.model.vmm.OrchsProvPlan"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("SpanDestGrpToEthIf", "Fabric Nodes or Interfaces", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ADomPToEthIf", "Interface", "cobra.model.l1.EthIf"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VDestGrpToPortGroups", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("VDestGrpToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("ControllerToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVirtualMachines", "Virtual Machines", "cobra.model.comp.Vm"))
    meta.deploymentQueryPaths.append(DeploymentPathMeta("DomainToVmmEpPD", "Portgroups", "cobra.model.vmm.EpPD"))

    def __init__(self, parentMoOrDn, markDirty=True, **creationProps):
        namingVals = []
        Mo.__init__(self, parentMoOrDn, markDirty, *namingVals,  **creationProps)



# End of package file
# ##################################################
